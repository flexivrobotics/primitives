



# List of Primitives

## Workflow

### [End](#end)


When the robot reached this primitive, it immediately terminates the active plan and returns to its parent plan. If 
there is no parent plan available, the assigned plan will be terminated.  


#### Primitive Description and Usage

* **Description:** When the robot reaches this primitive, it immediately terminates the active plan and returns to its parent plan. If there is no parent plan, the assigned plan will be terminated.
* **Example Usage:** It’s usually used at the end of a plan or sub-plan. It is similar to a **RETURN** command in common programming languages.


### [Home](#home)


This primitive drives robot to predefined home (joint) position.  


#### Primitive Description and Usage

* **Description:** This primitive moves robot to the default home configuration: [0, -40, 0, 90, 0, 40, 0] (deg) in a slow speed.
* **Example Usage:** 


	+ Resetting the robot’s pose at the initial setup
	+ Resetting the robot’s pose at the end of a plan
	+ Resetting the robot’s pose after recovering from some faults


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|maxJntVel|VEC_7d|maximum joint velocity for each joint|
|maxJntAcc|VEC_7d|maximum joint acceleration for each joint|
|target|VEC_7d|joint position|
  
Below is the detailed description of each parameter:
|par_name|maxJntVel|
| :---: | :---: |
|par_desc|maximum joint velocity for each joint|
|par_type|VEC_7d|
|par_unit|$deg/s$|
|par_required|0|
|par_default|20.0 20.0 20.0 20.0 20.0 20.0 20.0|
|par_max|120 120 140 140 280 280 280|
|par_min|0 0 0 0 0 0 0|

|par_name|maxJntAcc|
| :---: | :---: |
|par_desc|maximum joint acceleration for each joint|
|par_type|VEC_7d|
|par_unit|$deg/s^2$|
|par_required|0|
|par_default|10.0 10.0 10.0 10.0 10.0 10.0 10.0|
|par_max|1000 1000 1000 1000 1000 1000 1000|
|par_min|0 0 0 0 0 0 0|

|par_name|target|
| :---: | :---: |
|par_desc|joint position|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 120 170 154 170 260 170|
|par_min|-160 -120 -170 -107 -170 -80 -170|
|par_freedrive|1|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

### [Hold](#hold)


This primitive allows the robot to hold current joint position.  


#### Primitive Description and Usage

* **Description**: This primitive holds the robot at its current position.
* **Example Usage:** users need the robot to stand by.


#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

### [Fault](#fault)


User can use this primitive to trigger software fault (CAT2) and print out customized error message.  


#### Primitive Description and Usage

* **Description**: This primitive triggers **software fault (CAT2)** and prints out customizable error messages on the UI.
* **Example Usage:** It is typically used for intentionally triggering software faults during plan execution to control the workflow. For example, when some GPIOs have conflicting input signals.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|errorMessage|MSG|user-defined error message|
  
Below is the detailed description of each parameter:
|par_name|errorMessage|
| :---: | :---: |
|par_desc|user-defined error message|
|par_type|MSG|
|par_unit|$none$|
|par_default|triggered user specified fault|
|par_required|0|

### [GoTo](#goto)


This primitive directly jumps to the specified node in the same plan.  


#### Primitive Description and Usage

* **Description**: This primitive jumps to a specified node in the same plan. Although the exact functionality can also be achieved by a wired connection to the target node, **[GoTo](#goto)** provides a visually clearer way to make the transition. The user must specify the target node name in the input parameter. The plan cannot pass the **Check** if the specified target node does not exist in the same plan.
* **Example Usage**: Users can use this primitive to jump to other nodes in a plan, especially when the target nodes are far away from the current node and making a wired connection difficult for reading.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|nodeName|STRING|the node that the plan is headed to.|
  
Below is the detailed description of each parameter:
|par_name|nodeName|
| :---: | :---: |
|par_desc|the node that the plan is headed to.|
|par_type|STRING|
|par_unit|$none$|
|par_required|1|

### [Plan](#plan)


This primitive allows user to configure the subplan and create the nested structure of the workflow.  


#### Primitive Description and Usage

* **Description**: This primitive creates an empty plan, allowing users to implement customized workflow between nodes.
* **Example Usage:** 


	+ Creating a sub-plan for more advanced workflow control
	+ **for-loop**: To create a for-loop plan, users can specify the loop number in the input parameter, “**repeatTimes**”, in primitive attribute view. For example, **repeatTimes = 5** means this plan will be executed **five** times. Every time the loop counter will increase by one and the plan will re-start from “**Start Node**” transition. The **repeatTimes** info will be displayed on the plan block as well.
	
	**PLAN/L : 5** means this plan will loop **5** times
	
	**PLAN/L : cellNum** means this plan will loop **cellNum** number of times. (**cellNum** is an INT variable)
	
	![](./Images/PT_Plan/Screenshot_from_2021-02-27_18-14-12.png)


	+ **while-loop:** Users can create a while-loop by connecting the specified nodes in the plan. For example, in the following figure, a loop is created by connecting **child2\_move2** back to **child2\_move1**. The terminated condition for this loop can be defined in the transition condition between **child2\_move2** and **end1**. 
	
	![](./Images/PT_Plan/Screenshot_from_2021-03-01_12-24-26.png)




#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|repeatTimes|INT|The number of execution|
  
Below is the detailed description of each parameter:
|par_name|repeatTimes|
| :---: | :---: |
|par_desc|The number of execution|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|
|par_min|1|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|loopCounter|INT|Counter increases the value by one every time the plan enters start node|
  
Below is the detailed description of each parameter:
|par_name|loopCounter|
| :---: | :---: |
|par_desc|Counter increases the value by one every time the plan enters start node|
|par_type|INT|
|par_unit|$none$|

## Motion

### [MoveL](#movel)


This primitive is used to move the TCP of the robot to a target pose while passing through various waypoints. User can 
specify the maximum velocity and acceleration of the TCP for the robot to move.  


#### Primitive Description and Usage

* **Description**: Move straight line between waypoints and each waypoint is specified with **the same** max velocity, max acceleration for translation and rotation, and blend radius level in the entire path.
* **Example Usage:** 


	+ When detailed control of each waypoint is not needed.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|target|COORD|target (tcp) coordinate|
|waypoints|ARRAY_COORD|waypoints between initial and target poses|
|maxVel|DOUBLE|maximum Cartesian linear velocity|
|maxRotVel|DOUBLE|maximum Cartesian angular velocity|
|maxAcc|DOUBLE|maximum Cartesian linear acceleration|
|maxRotAcc|DOUBLE|maximum Cartesian angular acceleration|
|blendRadiusLevel|INT|blend radius level approaching waypoints|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 0 to 10, where 1 is the smallest tolerence, 0 means no tolerance check|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|nullspaceGradientScaling|VEC_3d|nullspace optmization objective gradient scaling. (linear manipulability, angular manipulability, preferJntPos error norm)|
  
Below is the detailed description of each parameter:
|par_name|target|
| :---: | :---: |
|par_desc|target (tcp) coordinate|
|par_type|COORD|
|par_unit|$m-deg$|
|par_option|TRAJ::START WORLD::WORLD_ORIGIN|
|par_required|1|
|par_freedrive|1|

|par_name|waypoints|
| :---: | :---: |
|par_desc|waypoints between initial and target poses|
|par_type|ARRAY_COORD|
|par_unit|$m-deg$|
|par_option|TRAJ::START TRAJ::GOAL TRAJ::PREVIOUSWAYPOINT WORLD::WORLD_ORIGIN|
|par_required|0|
|par_freedrive|1|

|par_name|maxVel|
| :---: | :---: |
|par_desc|maximum Cartesian linear velocity|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|1.0|
|par_max|2.2|
|par_min|0.01|

|par_name|maxRotVel|
| :---: | :---: |
|par_desc|maximum Cartesian angular velocity|
|par_type|DOUBLE|
|par_unit|$deg/s$|
|par_required|0|
|par_default|300|
|par_max|800|
|par_min|5|

|par_name|maxAcc|
| :---: | :---: |
|par_desc|maximum Cartesian linear acceleration|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|1.5|
|par_max|3.0|
|par_min|0.1|

|par_name|maxRotAcc|
| :---: | :---: |
|par_desc|maximum Cartesian angular acceleration|
|par_type|DOUBLE|
|par_unit|$deg/s^2$|
|par_required|0|
|par_default|300|
|par_max|800|
|par_min|5|

|par_name|blendRadiusLevel|
| :---: | :---: |
|par_desc|blend radius level approaching waypoints|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|9|
|par_min|0|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 0 to 10, where 1 is the smallest tolerence, 0 means no tolerance check|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|10|
|par_min|0|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

|par_name|nullspaceGradientScaling|
| :---: | :---: |
|par_desc|nullspace optmization objective gradient scaling. (linear manipulability, angular manipulability, preferJntPos error norm)|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0.0 0.0 1.0|
|par_max|5.0 5.0 5.0|
|par_min|0.0 0.0 1.0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|

### [MovePTP](#moveptp)


Move in joint space which passes through the waypoints and target tcp pose specified by user.  


#### Primitive Description and Usage

* **Description**: This primitive moves the robot to the target TCP pose with joint motion by calculating **inverse kinematics,** typically in a **curved line**. The curved line follows a natural joint space trajectory and hence provides good dynamics performance. Except for the target Cartesian pose, users can specify multiple Cartesian waypoints and the robot will pass through all of them with specified kino-dynamic constraints including joint velocity, joint acceleration, joint torque, Cartesian linear velocity, and Cartesian angular velocity.
* **Example Usage:**


	+ Moving the TCP in free space with good acceleration performance. Recommended for fast movement, but the shape of the trajectory is not strictly required.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|target|COORD|target (tcp) coordinate|
|maxJntVel|VEC_7d|maximum joint velocity for each joint|
|maxJntAcc|VEC_7d|maximum joint acceleration for each joint|
|waypoints|ARRAY_COORD|waypoints between initial and target poses|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 0 to 10, where 1 is the smallest tolerence, 0 means no tolerance check|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
  
Below is the detailed description of each parameter:
|par_name|target|
| :---: | :---: |
|par_desc|target (tcp) coordinate|
|par_type|COORD|
|par_unit|$m-deg$|
|par_option|TRAJ::START WORLD::WORLD_ORIGIN|
|par_required|1|
|par_freedrive|1|

|par_name|maxJntVel|
| :---: | :---: |
|par_desc|maximum joint velocity for each joint|
|par_type|VEC_7d|
|par_required|0|
|par_unit|$deg/s$|
|par_default|60.0 60.0 70.0 70.0 140.0 140.0 140.0|
|par_max|120 120 140 140 280 280 280|
|par_min|0 0 0 0 0 0 0|

|par_name|maxJntAcc|
| :---: | :---: |
|par_desc|maximum joint acceleration for each joint|
|par_type|VEC_7d|
|par_required|0|
|par_unit|$deg/s^2$|
|par_default|360 360 420 420 840 840 840|
|par_max|1000 1000 1000 1000 1000 1000 1000|
|par_min|0 0 0 0 0 0 0|

|par_name|waypoints|
| :---: | :---: |
|par_desc|waypoints between initial and target poses|
|par_type|ARRAY_COORD|
|par_unit|$m-deg$|
|par_option|TRAJ::START TRAJ::GOAL TRAJ::PREVIOUSWAYPOINT WORLD::WORLD_ORIGIN|
|par_required|0|
|par_freedrive|1|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 0 to 10, where 1 is the smallest tolerence, 0 means no tolerance check|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|
|par_max|10|
|par_min|0|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

### [MoveIK](#moveik)


Move in joint space which passes through the waypoints and target tcp pose specified by user.  


#### Primitive Description and Usage

* **Description**: This primitive moves the robot to the target TCP pose in a **straight line** with joint motion by calculating **inverse kinematics**. Except for the target Cartesian pose, users can specify multiple Cartesian waypoints and the robot will pass through all of them with specified kino-dynamic constraints including joint velocity, joint acceleration, joint torque, Cartesian linear velocity, and Cartesian angular velocity. 


	+ Currently, only Cartesian linear velocity is provided to the user as an input option. Other constraints take in predefined values.
* **Example Usage:**


	+ Moving the TCP in a straight line in free space.
	+ For general Cartesian move, it is recommended to use [MoveL](#movel) first to get the smoother trajectory, because the Cartesian jerk will be constrained (Currently [MoveIK](#moveik) does not have this feature).
	+ Compared to [MoveL](#movel), currently only [MoveIK](#moveik) constrains the joint velocity/acceleration and torque. When the joint velocity and torque errors are easily triggered when using [MoveL](#movel), it is recommended to use [MoveIK](#moveik) instead.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|target|COORD|target (tcp) coordinate|
|waypoints|ARRAY_COORD|waypoints between initial and target poses|
|maxV|DOUBLE|maximum Cartesian TCP velocity|
|maxJntAcc|DOUBLE|maximum joint acceleration|
|gridNum|INT|grid number for optimization|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
  
Below is the detailed description of each parameter:
|par_name|target|
| :---: | :---: |
|par_desc|target (tcp) coordinate|
|par_type|COORD|
|par_unit|$m-deg$|
|par_option|TRAJ::START WORLD::WORLD_ORIGIN|
|par_required|1|
|par_input_type|KEYIN TEACH PT|

|par_name|waypoints|
| :---: | :---: |
|par_desc|waypoints between initial and target poses|
|par_type|ARRAY_COORD|
|par_unit|$m-deg$|
|par_option|TRAJ::START TRAJ::GOAL TRAJ::PREVIOUSWAYPOINT WORLD::WORLD_ORIGIN|
|par_required|0|
|par_input_type|KEYIN TEACH PT|

|par_name|maxV|
| :---: | :---: |
|par_desc|maximum Cartesian TCP velocity|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$m/s$|
|par_default|0.2|
|par_max|2.0|
|par_min|0.001|

|par_name|maxJntAcc|
| :---: | :---: |
|par_desc|maximum joint acceleration|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$deg/s^2$|
|par_default|100|
|par_max|2000|
|par_min|100|

|par_name|gridNum|
| :---: | :---: |
|par_desc|grid number for optimization|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|100|
|par_max|1000|
|par_min|10|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|
|par_max|10|
|par_min|1|
|par_input_type|KEYIN|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

### [MoveC](#movec)


Move along a circular path described in Cartesian space which passes through the waypoints specified by user.  


#### Primitive Description and Usage

* **Description**: This primitive moves the robot along a circular/arc path to a given destination. 


	+ Starting pose, middle pose and target pose must not be collinear.
* **Example Usage:** It can be used in applications like welding that requires the robot to execute a circular/arc trajectory.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|target|COORD|target pose of the circular arc|
|middlePose|COORD|middle pose of the circular arc|
|maxVel|DOUBLE|maximum Cartesian linear velocity|
|maxAcc|DOUBLE|maximum Cartesian linear acceleration|
|maxJerk|DOUBLE|maximum jerk along the path|
|equalRadius|DOUBLE|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|nullspaceGradientScaling|VEC_3d|nullspace optmization objective gradient scaling. (linear manipulability, angular manipulability, preferJntPos error norm)|
  
Below is the detailed description of each parameter:
|par_name|target|
| :---: | :---: |
|par_desc|target pose of the circular arc|
|par_type|COORD|
|par_option|TRAJ::START WORLD::WORLD_ORIGIN|
|par_required|1|
|par_unit|$m-deg$|
|par_freedrive|1|

|par_name|middlePose|
| :---: | :---: |
|par_desc|middle pose of the circular arc|
|par_type|COORD|
|par_option|TRAJ::START TRAJ::GOAL TRAJ::PREVIOUSWAYPOINT WORLD::WORLD_ORIGIN|
|par_required|1|
|par_unit|$m-deg$|
|par_freedrive|1|

|par_name|maxVel|
| :---: | :---: |
|par_desc|maximum Cartesian linear velocity|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$m/s$|
|par_max|2.0|
|par_min|0.01|
|par_default|1.5|

|par_name|maxAcc|
| :---: | :---: |
|par_desc|maximum Cartesian linear acceleration|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|1.5|
|par_max|3.0|
|par_min|0.1|

|par_name|maxJerk|
| :---: | :---: |
|par_desc|maximum jerk along the path|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|90.0|

|par_name|equalRadius|
| :---: | :---: |
|par_desc|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.1|
|par_max|10.0|
|par_min|0.0|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|10|
|par_min|1|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

|par_name|nullspaceGradientScaling|
| :---: | :---: |
|par_desc|nullspace optmization objective gradient scaling. (linear manipulability, angular manipulability, preferJntPos error norm)|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0.0 0.0 1.0|
|par_max|5.0 5.0 5.0|
|par_min|0.0 0.0 1.0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

### [MoveJ](#movej)


Move along a jerk-limited trajectory in joint space which passes through the waypoints and target configuration 
specified by user.  


#### Primitive Description and Usage

* **Description**: This primitive moves the robot with joint motion. Users can specify joint position target and multiple joint space waypoints. The robot will pass through all of them with the specified max joint velocities and accelerations.
* **Example Usage:** moving the robot to a joint space target.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|target|VEC_7d|joint position|
|maxJntVel|VEC_7d|maximum joint velocity for each joint|
|maxJntAcc|VEC_7d|maximum joint acceleration for each joint|
|waypoints|ARRAY_VEC_7d|waypoints joint position|
|relativeToStart|BOOL|Enable relative target pose mode|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 0 to 10, where 1 is the smallest tolerence, 0 means no tolerance check|
  
Below is the detailed description of each parameter:
|par_name|target|
| :---: | :---: |
|par_desc|joint position|
|par_type|VEC_7d|
|par_required|1|
|par_unit|$deg$|
|par_max|160 120 170 154 170 260 170|
|par_min|-160 -120 -170 -107 -170 -80 -170|
|par_freedrive|1|

|par_name|maxJntVel|
| :---: | :---: |
|par_desc|maximum joint velocity for each joint|
|par_type|VEC_7d|
|par_required|0|
|par_unit|$deg/s$|
|par_default|60.0 60.0 70.0 70.0 140.0 140.0 140.0|
|par_max|120 120 140 140 280 280 280|
|par_min|0 0 0 0 0 0 0|

|par_name|maxJntAcc|
| :---: | :---: |
|par_desc|maximum joint acceleration for each joint|
|par_type|VEC_7d|
|par_required|0|
|par_unit|$deg/s^2$|
|par_default|360 360 420 420 840 840 840|
|par_max|1000 1000 1000 1000 1000 1000 1000|
|par_min|0 0 0 0 0 0 0|

|par_name|waypoints|
| :---: | :---: |
|par_desc|waypoints joint position|
|par_type|ARRAY_VEC_7d|
|par_required|0|
|par_unit|$deg$|
|par_max|160 120 170 154 170 260 170|
|par_min|-160 -120 -170 -107 -170 -80 -170|
|par_freedrive|1|

|par_name|relativeToStart|
| :---: | :---: |
|par_desc|Enable relative target pose mode|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 0 to 10, where 1 is the smallest tolerence, 0 means no tolerance check|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|
|par_max|10|
|par_min|0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

### [MoveWait](#movewait)


Executing move line command and at each waypoint, robot could wait for a specific DI port to be 1 or 0 and then go to 
next waypoint  


#### Primitive Description and Usage

* **Description**: This primitive is to move robot TCP in linear motion in Cartesian space, and provide additional functions to interact with IO signal during the execution:


	+ At each waypoint, users can specify a **DI(digital input) index** and a target DI value to be 0(low) or 1(high). The robot will not go to the next waypoint until the specific DI is at the specified value.
	+ In the meantime, users can specify a **maximum waiting time** at each waypoint. If the DI is not at the specified value within the maximum waiting time, the state variable timeout Index will be set and plan execution will continue.
* **Example Usage:** In this primitive, users can use an IO signal to control the workflow, for example, having the robot waiting for a GPIO command from the master controller in a production line.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|waypoints|ARRAY_COORD|waypoints on the trajectory|
|maxVel|ARRAY_DOUBLE|maximum Cartesian linear velocity|
|maxAcc|ARRAY_DOUBLE|maximum Cartesian linear acceleration|
|zoneRadius|ARRAY_TYPE|zone radius approaching waypoints|
|ioModule|TYPE|IO module could be System or Modbus|
|diPort|ARRAY_INT|digital input port number|
|diValue|ARRAY_INT|expected digital input value|
|enableWait|ARRAY_BOOL|if enabled wait DI function at corresponding waypoint index|
|waitTime|ARRAY_DOUBLE|wait time at each waypoint. If timeout, the corresponding timeout index will be set|
|equalRadius|DOUBLE|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|maxJerk|DOUBLE|maximum jerk along the path|
|maxCornerAcc|DOUBLE|maximum acceleration at corner|
|maxCornerJerk|DOUBLE|maximum jerk at corner|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 0 to 10, where 1 is the smallest tolerence, 0 means no tolerance check|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
  
Below is the detailed description of each parameter:
|par_name|waypoints|
| :---: | :---: |
|par_desc|waypoints on the trajectory|
|par_type|ARRAY_COORD|
|par_option|TRAJ::START TRAJ::GOAL TRAJ::PREVIOUSWAYPOINT WORLD::WORLD_ORIGIN|
|par_required|1|
|par_unit|$m-deg$|

|par_name|maxVel|
| :---: | :---: |
|par_desc|maximum Cartesian linear velocity|
|par_type|ARRAY_DOUBLE|
|par_unit|$m/s$|
|par_max|2.0|
|par_min|0.01|
|par_default|1.0|
|par_required|1|

|par_name|maxAcc|
| :---: | :---: |
|par_desc|maximum Cartesian linear acceleration|
|par_type|ARRAY_DOUBLE|
|par_unit|$m/s^2$|
|par_max|10.0|
|par_min|0.1|
|par_default|1.0|
|par_required|1|

|par_name|zoneRadius|
| :---: | :---: |
|par_desc|zone radius approaching waypoints|
|par_type|ARRAY_TYPE|
|par_unit|$m$|
|par_default|Z10|
|par_option|Z0 Z1 Z5 Z10 Z15 Z20 Z30 Z40 Z50 Z60 Z80 Z100 Z150 Z200|
|par_required|1|

|par_name|ioModule|
| :---: | :---: |
|par_desc|IO module could be System or Modbus|
|par_type|TYPE|
|par_unit|$none$|
|par_default|System|
|par_option|System Modbus|
|par_required|0|

|par_name|diPort|
| :---: | :---: |
|par_desc|digital input port number|
|par_type|ARRAY_INT|
|par_unit|$none$|
|par_max|15|
|par_min|0|
|par_required|1|

|par_name|diValue|
| :---: | :---: |
|par_desc|expected digital input value|
|par_type|ARRAY_INT|
|par_unit|$none$|
|par_max|1|
|par_min|0|
|par_required|1|

|par_name|enableWait|
| :---: | :---: |
|par_desc|if enabled wait DI function at corresponding waypoint index|
|par_type|ARRAY_BOOL|
|par_unit|$none$|
|par_required|1|

|par_name|waitTime|
| :---: | :---: |
|par_desc|wait time at each waypoint. If timeout, the corresponding timeout index will be set|
|par_type|ARRAY_DOUBLE|
|par_unit|$s$|
|par_max|1000|
|par_min|0.1|
|par_required|1|

|par_name|equalRadius|
| :---: | :---: |
|par_desc|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.1|
|par_max|10.0|
|par_min|0.0|

|par_name|maxJerk|
| :---: | :---: |
|par_desc|maximum jerk along the path|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|1000.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxCornerAcc|
| :---: | :---: |
|par_desc|maximum acceleration at corner|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|20.0|
|par_max|20.0|
|par_min|0.5|

|par_name|maxCornerJerk|
| :---: | :---: |
|par_desc|maximum jerk at corner|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|800.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 0 to 10, where 1 is the smallest tolerence, 0 means no tolerance check|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|10|
|par_min|1|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|timeoutIndex|INT|Index of the timeout waypoint. Equals to 0 if no timeout occurs|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

|par_name|timeoutIndex|
| :---: | :---: |
|par_desc|Index of the timeout waypoint. Equals to 0 if no timeout occurs|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

### [MoveTraj](#movetraj)


moves along a trajectory defined in a trajectory file via Trajectory Editor App  


#### Primitive Description and Usage

* **Description**: This primitive moves the robot in a predefined trajectory generated by the Trajectory Editor.


	+ This primitive allows the robot to move along such a trajectory generated by the Trajectory Editor in a pure motion mode or a hybrid force-motion mode.
	+ There’s a force control axis parameter (a 3d vector) in this primitive that determines the execution mode.
	
	
		- If the force control axis is a zero vector, the robot will run in the pure motion mode. In such a case, the robot will move along the trajectory by going through the pose specified at each waypoint.
		- If the force control axis is not a zero vector, the robot will move along the trajectory by going through the waypoints; **however**, the TCP will follow the force trajectory along the force control axes (ignoring the pose information along the force control axes), and the motion trajectory along the non-force control axes.
* **Example Usage:**


	+ In some applications, a user may command the robot to go through a complicated trajectory consisting of many waypoints with specific geometry constraints. In such cases, it is very difficult to configure these waypoints by typing them one after another; instead, they can use the Trajectory Editor to configure such a trajectory via a combination of teaching and editing. And the result can be saved in a trajectory file.
	+ Furthermore, in addition to geometry constraints, some tasks would also require the trajectory to comply with some force constraints. In the Trajectory Editor, the user can further edit this trajectory by adding a wrench at each waypoint such that the trajectory is a hybrid force-motion trajectory with 12 DOF with 6 motion DOF and 6 force DOF.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|fileName|FILE|name of the file that contains micro-lines|
|forceAxis|VEC_6i|force axis|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|equalRadius|DOUBLE|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
  
Below is the detailed description of each parameter:
|par_name|fileName|
| :---: | :---: |
|par_desc|name of the file that contains micro-lines|
|par_type|FILE|
|par_unit|$none$|
|par_required|1|
|par_option|.traj|

|par_name|forceAxis|
| :---: | :---: |
|par_desc|force axis|
|par_type|VEC_6i|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 1 0 0 0|
|par_max|1 1 1 1 1 1|
|par_min|0 0 0 0 0 0|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 107 170 260 170|
|par_min|-160 -130 -170 -154 -170 -80 -170|
|par_freedrive|1|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|10|
|par_min|1|

|par_name|equalRadius|
| :---: | :---: |
|par_desc|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.1|
|par_max|10.0|
|par_min|0.0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

### [MoveCompliance](#movecompliance)


This primitive is used to compliantly move the TCP of the robot to a target pose while passing through various 
waypoints. User can specify the maximum velocity acceleration and stiffness scaling of the TCP for the robot to move.  


#### Primitive Description and Usage

* **Description**: This primitive is used to compliantly move the TCP of the robot to a target pose while passing through various waypoints. Users can specify the maximum velocity acceleration and stiffness scaling of the flange for the robot to move.
* **Example Usage:** coming soon


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|target|COORD|target (tcp) coordinate|
|waypoints|ARRAY_COORD|waypoints between initial and target poses|
|maxVel|DOUBLE|maximum Cartesian linear velocity|
|maxRotVel|DOUBLE|maximum Cartesian angular velocity|
|maxAcc|DOUBLE|maximum Cartesian linear acceleration|
|maxRotAcc|DOUBLE|maximum Cartesian angular acceleration|
|blendRadiusLevel|INT|blend radius level approaching waypoints|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 0 to 10, where 1 is the smallest tolerence, 0 means no tolerance check|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|stiffnessScaling|VEC_6d|tcp stiffness scaling ranged from 0.1 to 1.0, where 0.1 is the smallest stiffness.|
|enableMaxContactWrench|BOOL|if enable max contact wrench|
|maxContactWrench|VEC_6d|maximum contact wrench allowed for collision.|
|nullspaceGradientScaling|VEC_3d|nullspace optmization objective gradient scaling. (linear manipulability, angular manipulability, preferJntPos error norm)|
  
Below is the detailed description of each parameter:
|par_name|target|
| :---: | :---: |
|par_desc|target (tcp) coordinate|
|par_type|COORD|
|par_unit|$m-deg$|
|par_option|TRAJ::START WORLD::WORLD_ORIGIN|
|par_required|1|
|par_freedrive|1|

|par_name|waypoints|
| :---: | :---: |
|par_desc|waypoints between initial and target poses|
|par_type|ARRAY_COORD|
|par_unit|$m-deg$|
|par_option|TRAJ::START TRAJ::GOAL TRAJ::PREVIOUSWAYPOINT WORLD::WORLD_ORIGIN|
|par_required|0|
|par_freedrive|1|

|par_name|maxVel|
| :---: | :---: |
|par_desc|maximum Cartesian linear velocity|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|1.0|
|par_max|2.2|
|par_min|0.01|

|par_name|maxRotVel|
| :---: | :---: |
|par_desc|maximum Cartesian angular velocity|
|par_type|DOUBLE|
|par_unit|$deg/s$|
|par_required|0|
|par_default|300|
|par_max|800|
|par_min|5|

|par_name|maxAcc|
| :---: | :---: |
|par_desc|maximum Cartesian linear acceleration|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|1.5|
|par_max|3.0|
|par_min|0.1|

|par_name|maxRotAcc|
| :---: | :---: |
|par_desc|maximum Cartesian angular acceleration|
|par_type|DOUBLE|
|par_unit|$deg/s^2$|
|par_required|0|
|par_default|300|
|par_max|800|
|par_min|5|

|par_name|blendRadiusLevel|
| :---: | :---: |
|par_desc|blend radius level approaching waypoints|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|9|
|par_min|0|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 0 to 10, where 1 is the smallest tolerence, 0 means no tolerance check|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_max|10|
|par_min|0|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

|par_name|stiffnessScaling|
| :---: | :---: |
|par_desc|tcp stiffness scaling ranged from 0.1 to 1.0, where 0.1 is the smallest stiffness.|
|par_type|VEC_6d|
|par_unit|$none$|
|par_required|0|
|par_default|1.0 1.0 1.0 1.0 1.0 1.0|
|par_max|1.0 1.0 1.0 1.0 1.0 1.0|
|par_min|0.1 0.1 0.1 0.1 0.1 0.1|

|par_name|enableMaxContactWrench|
| :---: | :---: |
|par_desc|if enable max contact wrench|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

|par_name|maxContactWrench|
| :---: | :---: |
|par_desc|maximum contact wrench allowed for collision.|
|par_type|VEC_6d|
|par_unit|$N$|
|par_required|0|
|par_default|60.0 60.0 60.0 15.0 15.0 15.0|
|par_max|100.0 100.0 100.0 30.0 30.0 30.0|
|par_min|20.0 20.0 20.0 6.0 6.0 6.0|

|par_name|nullspaceGradientScaling|
| :---: | :---: |
|par_desc|nullspace optmization objective gradient scaling. (linear manipulability, angular manipulability, preferJntPos error norm)|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0.0 0.0 1.0|
|par_max|5.0 5.0 5.0|
|par_min|0.0 0.0 1.0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|

### [MoveHybrid](#movehybrid)


User can specify hybrid force and motion in (TCP) Cartesain space.  


#### Primitive Description and Usage

* **Description**: Hybrid motion/force control, while moving straight line between waypoints in motion control directions and exerting force in force control directions.
* **Example Usage:** 


	+ polish on a flat surface along trajectories with straight line segments
	+ polish along edges with straigh line shape


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|target|COORD|target (tcp) pose|
|waypoints|ARRAY_COORD|waypoints between initial and target poses|
|wrench|ARRAY_VEC_6d|wrench of waypoints between initial and target poses|
|forceAxis|VEC_6d|force axis|
|frictionViscousCoeff|DOUBLE|viscous coefficient of friction|
|goalWrench|VEC_6d|goal wrench|
|maxVel|DOUBLE|maximum Cartesian linear velocity|
|maxRotVel|DOUBLE|maximum Cartesian angular velocity|
|maxAcc|DOUBLE|maximum Cartesian linear acceleration|
|maxRotAcc|DOUBLE|maximum Cartesian angular acceleration|
|maxRadiusCurvature|DOUBLE|maximum radius of curvature when the robot passes through waypoints|
|scaleWrench|DOUBLE|Scale wrench (0 to 1 where 1 is the the current wrench. Value can exceed 1)|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
  
Below is the detailed description of each parameter:
|par_name|target|
| :---: | :---: |
|par_desc|target (tcp) pose|
|par_type|COORD|
|par_option|TRAJ::START WORLD::WORLD_ORIGIN|
|par_unit|$m-deg$|
|par_required|1|
|par_freedrive|1|

|par_name|waypoints|
| :---: | :---: |
|par_desc|waypoints between initial and target poses|
|par_type|ARRAY_COORD|
|par_unit|$m-deg$|
|par_option|TRAJ::START TRAJ::GOAL TRAJ::PREVIOUSWAYPOINT WORLD::WORLD_ORIGIN|
|par_required|0|
|par_freedrive|1|

|par_name|wrench|
| :---: | :---: |
|par_desc|wrench of waypoints between initial and target poses|
|par_type|ARRAY_VEC_6d|
|par_required|0|
|par_unit|$N$|

|par_name|forceAxis|
| :---: | :---: |
|par_desc|force axis|
|par_type|VEC_6d|
|par_unit|$none$|
|par_required|0|
|par_default|0.0 0.0 0.0 0.0 0.0 0.0|

|par_name|frictionViscousCoeff|
| :---: | :---: |
|par_desc|viscous coefficient of friction|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.0|

|par_name|goalWrench|
| :---: | :---: |
|par_desc|goal wrench|
|par_type|VEC_6d|
|par_required|1|
|par_unit|$N$|
|par_default|0.0 0.0 1.0 0.0 0.0 0.0|

|par_name|maxVel|
| :---: | :---: |
|par_desc|maximum Cartesian linear velocity|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$m/s$|
|par_default|0.2|
|par_max|2.0|
|par_min|0.01|

|par_name|maxRotVel|
| :---: | :---: |
|par_desc|maximum Cartesian angular velocity|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$rad/s$|
|par_default|1.0|
|par_max|4.0|
|par_min|0.1|

|par_name|maxAcc|
| :---: | :---: |
|par_desc|maximum Cartesian linear acceleration|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$m/s^2$|
|par_default|1.0|
|par_max|3.0|
|par_min|0.1|

|par_name|maxRotAcc|
| :---: | :---: |
|par_desc|maximum Cartesian angular acceleration|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$rad/s^2$|
|par_default|2.0|
|par_max|4.0|
|par_min|0.1|

|par_name|maxRadiusCurvature|
| :---: | :---: |
|par_desc|maximum radius of curvature when the robot passes through waypoints|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$m$|
|par_default|0.0|
|par_max|1.0|
|par_min|0.0|

|par_name|scaleWrench|
| :---: | :---: |
|par_desc|Scale wrench (0 to 1 where 1 is the the current wrench. Value can exceed 1)|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1.0|
|par_max|10.0|
|par_min|0.0|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

## Hybrid Motion/Force

### [CaliForceSensor](#califorcesensor)


This primitive calibrates the 6Dofs load cell and joint torque sensors during the run-time. It zeros the force/torque 
measurement offset in 100 ms. It is recommended to run this primitive before any force-controlled primitive.  


#### Primitive Description and Usage

* **Description:** This primitive is used to reset the Cartesian force/torque offset. It is usually used before force control primitive.


	+ This primitive can be used with and without a 6DoF force/torque sensor(Rizon 4 and Rizon 4s)
* **Example Usage:**


	+ Resetting the Cartesian force/torque offset(to Zero) before polishing


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|dataCollectionTime|DOUBLE|time period of the force offset estimation|
|enableStaticCheck|BOOL|switch to enable checking whether the robot is static|
  
Below is the detailed description of each parameter:
|par_name|dataCollectionTime|
| :---: | :---: |
|par_desc|time period of the force offset estimation|
|par_type|DOUBLE|
|par_unit|$s$|
|par_required|0|
|par_default|0.2|
|par_max|1.0|
|par_min|0.1|

|par_name|enableStaticCheck|
| :---: | :---: |
|par_desc|switch to enable checking whether the robot is static|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

### [Contact](#contact)


This primitive is used to move robot in certain direction until it contacts environment. It is commonly used as a 
preliminary motion when the robot needs to make contact with environment.  


#### Primitive Description and Usage

* **Description:** This primitive executes a motion moving from free space to contact space. The robot moves in a pre-defined direction and stops immediately when its contact force with object reaches set *maxContactForce* value. Users can specify the moving speed and contact force as input parameters. 


	+ [CaliForceSensor](#califorcesensor) should always be used before doing [Contact](#contact).
* **Example Usage:** It is commonly used prior to tasks when the robot contacts the environment. For example, in polishing or assembling, the robot’s tool needs to make contact with the parts before executing any polishing or peg-in-hole actions.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|contactVel|DOUBLE|robot Cartesian moving velocity to contact environment|
|coord|TYPE|coordinate of contact moving direction|
|movingDir|VEC_3d|moving direction in defined coordinate|
|maxContactForce|DOUBLE|absolute value of the maximum total force, threshold to terminate contact|
|fineContactMode|BOOL|if set true, robot would slow its velocity when detect a small contact force before reaching the maximum contact force, so as to get a more fine contact force. Otherwise, robot would move with the set velocity all the time|
  
Below is the detailed description of each parameter:
|par_name|contactVel|
| :---: | :---: |
|par_desc|robot Cartesian moving velocity to contact environment|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|0.02|
|par_max|0.1|
|par_min|0.001|

|par_name|coord|
| :---: | :---: |
|par_desc|coordinate of contact moving direction|
|par_type|TYPE|
|par_unit|$none$|
|par_required|0|
|par_default|world|
|par_option|world tcp|

|par_name|movingDir|
| :---: | :---: |
|par_desc|moving direction in defined coordinate|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0.0 0.0 -1.0|

|par_name|maxContactForce|
| :---: | :---: |
|par_desc|absolute value of the maximum total force, threshold to terminate contact|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|0|
|par_default|5.0|
|par_max|120|
|par_min|1.0|

|par_name|fineContactMode|
| :---: | :---: |
|par_desc|if set true, robot would slow its velocity when detect a small contact force before reaching the maximum contact force, so as to get a more fine contact force. Otherwise, robot would move with the set velocity all the time|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|1|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|curContactForce|DOUBLE|current contact force in the contact direction|
|insertDis|DOUBLE|robot insertion distance in contact direction|
  
Below is the detailed description of each parameter:
|par_name|curContactForce|
| :---: | :---: |
|par_desc|current contact force in the contact direction|
|par_type|DOUBLE|
|par_unit|$N$|

|par_name|insertDis|
| :---: | :---: |
|par_desc|robot insertion distance in contact direction|
|par_type|DOUBLE|
|par_unit|$m$|

### [AlignContact](#aligncontact)


In this primitive, robot would contact with environment in predefined Cartesian direction with set force, while 
adjusting its position and orientation to be compliant with environment at the same time.  


#### Primitive Description and Usage

* **Description**: This primitive contacts and maintains force control with the environment in a predefined contact direction with a set force, while adjusting its position and orientation to be compliant and to align with the environment.
* **Example Usage:** It helps when the robot’s final target is not a perfectly predefined pose. For example, when grasping an object whose location is not fully known, the robot needs to use contact information to understand the spatial relationship between the object and itself.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|contactDir|VEC_3d|contact direction in tool coordinate. It could be 0, 1 or -1 for each axis. If set as 1 or -1, the robot would make force control on corresponding direction|
|alignmentDir|VEC_6i|alignment direction in tool coordinate. It could be 0 or 1 for each axis. if set as 1, the robot would be force compliant in corresponding axis. For example, (0,1,0,1,0,0) means compliant in linear y and rotation x axis|
|targetForce|DOUBLE|target contact force in tcp coordinate that robot output on pre-set force control axis|
|deadbandScale|DOUBLE|robot alignment wrench deadband scale. Robot would not adjust its position or orientation when external wrench torque is smaller than this deadband|
|freeSpaceVel|DOUBLE|velocity in free space|
|alignVelScale|DOUBLE|scale of alignment speed to observed external wrench. Robot would adjust its pose faster when this value is bigger, but may become less stable. The default value is recommended.|
|oriAlignMode|BOOL|orientation alignment mode.Not Work Currently.|
  
Below is the detailed description of each parameter:
|par_name|contactDir|
| :---: | :---: |
|par_desc|contact direction in tool coordinate. It could be 0, 1 or -1 for each axis. If set as 1 or -1, the robot would make force control on corresponding direction|
|par_type|VEC_3d|
|par_required|0|
|par_unit|$none$|
|par_default|0 0 1|
|par_max|1 1 1|
|par_min|-1 -1 -1|

|par_name|alignmentDir|
| :---: | :---: |
|par_desc|alignment direction in tool coordinate. It could be 0 or 1 for each axis. if set as 1, the robot would be force compliant in corresponding axis. For example, (0,1,0,1,0,0) means compliant in linear y and rotation x axis|
|par_type|VEC_6i|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 0 0 0 0|
|par_max|1 1 1 1 1 1|
|par_min|0 0 0 0 0 0|

|par_name|targetForce|
| :---: | :---: |
|par_desc|target contact force in tcp coordinate that robot output on pre-set force control axis|
|par_type|DOUBLE|
|par_unit|$N$|
|par_min|5|
|par_max|30|
|par_required|0|
|par_default|5|

|par_name|deadbandScale|
| :---: | :---: |
|par_desc|robot alignment wrench deadband scale. Robot would not adjust its position or orientation when external wrench torque is smaller than this deadband|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_min|0.0|
|par_max|1.0|
|par_default|0.5|

|par_name|freeSpaceVel|
| :---: | :---: |
|par_desc|velocity in free space|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|0.01|
|par_max|0.03|
|par_min|0.001|

|par_name|alignVelScale|
| :---: | :---: |
|par_desc|scale of alignment speed to observed external wrench. Robot would adjust its pose faster when this value is bigger, but may become less stable. The default value is recommended.|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.2|
|par_max|1.0|
|par_min|0.0|

|par_name|oriAlignMode|
| :---: | :---: |
|par_desc|orientation alignment mode.Not Work Currently.|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|alignContacted|BOOL|robot contact and is alignment with environment|
|insertDis|DOUBLE|robot insertion distance in contact direction|
  
Below is the detailed description of each parameter:
|par_name|alignContacted|
| :---: | :---: |
|par_desc|robot contact and is alignment with environment|
|par_type|BOOL|
|par_unit|$none$|

|par_name|insertDis|
| :---: | :---: |
|par_desc|robot insertion distance in contact direction|
|par_type|DOUBLE|
|par_unit|$m$|

## Grasping

### [CompliantGripExt](#compliantgripext)


This primitive allows the robot perform compliant motion while gripping an object which is WITHIN the gripper fingers. 
When the distances between object and two fingers are different, gripper might contact the object with one finger first 
and push it toward the other finger while closing fingers. This might damage the object if the object is fixed. This 
primitive limits the maximum contact force between gripper and object by performing compliant motion of the robot.  


#### Primitive Description and Usage

* **Description:** **[CompliantGripExt](#compliantgripext)** and **[CompliantGripInt](#compliantgripint)** are two primitives driving grippers to perform compliant gripping motions while limiting the maximum contact force between gripper and object. They are similar except that:


	+ gripper fingers **open** in **[CompliantGripInt](#compliantgripint)** to grip objects from **inside**
	+ gripper fingers **close** in **[CompliantGripExt](#compliantgripext)** to grip objects from **outside**.
* **Example Usage:** This primitive pair allows the robot to perform compliant motion while gripping an object. When the object is not in the center of two fingertips, the gripper may contact the object with one finger first and push the object toward the other finger. This can damage the object if the object is fixed.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|gripSpeed|DOUBLE|gripper finger opening speed|
|gripWidth|DOUBLE|gripper target open width|
|maxGripForce|DOUBLE|maximum grip force between gripper and object|
|compliantTCPAxis|TYPE|compliant direction in gripper local coordinate|
  
Below is the detailed description of each parameter:
|par_name|gripSpeed|
| :---: | :---: |
|par_desc|gripper finger opening speed|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_default|0.01|
|par_required|0|
|par_min|0.0|
|par_max|0.05|

|par_name|gripWidth|
| :---: | :---: |
|par_desc|gripper target open width|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.0|
|par_min|0.0|
|par_max|0.1|

|par_name|maxGripForce|
| :---: | :---: |
|par_desc|maximum grip force between gripper and object|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|0|
|par_default|30.0|
|par_min|0.0|
|par_max|50.0|

|par_name|compliantTCPAxis|
| :---: | :---: |
|par_desc|compliant direction in gripper local coordinate|
|par_type|TYPE|
|par_unit|$none$|
|par_required|0|
|par_default|Y|
|par_option|X Y Z XY XZ YZ XYZ|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|curWidth|DOUBLE|current width between gripper fingers|
|reachedForce|BOOL|flag to indicate if force between gripper and object reaches set value|
|reachedWidth|BOOL|flag to indicate if width between gripper fingers reaches set value|
|isMoving|BOOL|flag to indicate if gripper fingers are moving|
  
Below is the detailed description of each parameter:
|par_name|curWidth|
| :---: | :---: |
|par_desc|current width between gripper fingers|
|par_type|DOUBLE|
|par_unit|$m$|

|par_name|reachedForce|
| :---: | :---: |
|par_desc|flag to indicate if force between gripper and object reaches set value|
|par_type|BOOL|
|par_unit|$none$|

|par_name|reachedWidth|
| :---: | :---: |
|par_desc|flag to indicate if width between gripper fingers reaches set value|
|par_type|BOOL|
|par_unit|$none$|

|par_name|isMoving|
| :---: | :---: |
|par_desc|flag to indicate if gripper fingers are moving|
|par_type|BOOL|
|par_unit|$none$|

### [CompliantGripInt](#compliantgripint)


This primitive allows the robot perform compliant motion while gripping an object which is OUTSIDE the gripper fingers. 
When the distances between object and two fingers are different, gripper might contact the object with one finger first 
and push it toward the other finger while opening fingers. This might damage the object if the object is fixed. This 
primitive limits the maximum contact force between gripper and object by performing compliant motion of the robot.  


#### Primitive Description and Usage

* **Description:** **[CompliantGripExt](#compliantgripext)** and **[CompliantGripInt](#compliantgripint)** are two primitives driving grippers to perform compliant gripping motions while limiting the maximum contact force between gripper and object. They are similar except that:


	+ gripper fingers **open** in **[CompliantGripInt](#compliantgripint)** to grip objects from **inside**
	+ gripper fingers **close** in **[CompliantGripExt](#compliantgripext)** to grip objects from **outside**.
* **Example Usage:** This primitive pair allows the robot to perform compliant motion while gripping an object. When the object is not in the center of two fingertips, the gripper may contact the object with one finger first and push the object toward the other finger. This can damage the object if the object is fixed.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|gripSpeed|DOUBLE|gripper finger closing moving|
|gripWidth|DOUBLE|gripper target open width|
|maxGripForce|DOUBLE|maximum grip force between gripper and object|
|compliantTCPAxis|TYPE|compliant direction in gripper local coordinate|
  
Below is the detailed description of each parameter:
|par_name|gripSpeed|
| :---: | :---: |
|par_desc|gripper finger closing moving|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_default|0.01|
|par_required|0|
|par_min|0.0|
|par_max|0.05|

|par_name|gripWidth|
| :---: | :---: |
|par_desc|gripper target open width|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.1|
|par_min|0.0|
|par_max|0.1|

|par_name|maxGripForce|
| :---: | :---: |
|par_desc|maximum grip force between gripper and object|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|0|
|par_default|30.0|
|par_min|0.0|
|par_max|50.0|

|par_name|compliantTCPAxis|
| :---: | :---: |
|par_desc|compliant direction in gripper local coordinate|
|par_type|TYPE|
|par_unit|$none$|
|par_required|0|
|par_default|Y|
|par_option|X Y Z XY XZ YZ XYZ|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|curWidth|DOUBLE|current width between gripper fingers|
|reachedForce|BOOL|flag to indicate if force between gripper and object reaches set value|
|reachedWidth|BOOL|flag to indicate if width between gripper fingers reaches set value|
|isMoving|BOOL|flag to indicate if gripper fingers are moving|
  
Below is the detailed description of each parameter:
|par_name|curWidth|
| :---: | :---: |
|par_desc|current width between gripper fingers|
|par_type|DOUBLE|
|par_unit|$m$|

|par_name|reachedForce|
| :---: | :---: |
|par_desc|flag to indicate if force between gripper and object reaches set value|
|par_type|BOOL|
|par_unit|$none$|

|par_name|reachedWidth|
| :---: | :---: |
|par_desc|flag to indicate if width between gripper fingers reaches set value|
|par_type|BOOL|
|par_unit|$none$|

|par_name|isMoving|
| :---: | :---: |
|par_desc|flag to indicate if gripper fingers are moving|
|par_type|BOOL|
|par_unit|$none$|

### [ContactGripExt](#contactgripext)


This primitive is designed to grasp small/thin object which is WITHIN gripper fingers and on a flat surface. The gripper
 contacts the surface first and keeps maintaining the contact while closing fingers.  


#### Primitive Description and Usage

PT\_ContactGrip consists of two primitives: **[ContactGripExt](#contactgripext)** and **[ContactGripInt](#contactgripint)**. They are the same except that gripper fingers opening in [ContactGripInt](#contactgripint)( to grip object from internal) and closing in [ContactGripExt](#contactgripext)(to grip object from external).

This primitive is designed to grip small/thin object on flat surface. The gripper contacts the surface first and keeps maintaining the contact while closing/opening fingers. User can specify the contact force in primitive parameter. 


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|gripSpeed|DOUBLE|gripper finger closing moving|
|gripWidth|DOUBLE|gripper target close width|
|maxGripForce|DOUBLE|maximum grip force between gripper and object|
|contactTCPAxis|TYPE|contact axis in gripper coordinate.|
|contactForce|DOUBLE|target contact force in tcp coordinate that robot output on pre-set force control axis|
  
Below is the detailed description of each parameter:
|par_name|gripSpeed|
| :---: | :---: |
|par_desc|gripper finger closing moving|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_default|0.01|
|par_required|0|
|par_min|0.0|
|par_max|0.05|

|par_name|gripWidth|
| :---: | :---: |
|par_desc|gripper target close width|
|par_unit|$m$|
|par_type|DOUBLE|
|par_required|0|
|par_default|0.0|
|par_min|0.0|
|par_max|0.1|

|par_name|maxGripForce|
| :---: | :---: |
|par_desc|maximum grip force between gripper and object|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|0|
|par_default|30.0|
|par_min|0.0|
|par_max|50.0|

|par_name|contactTCPAxis|
| :---: | :---: |
|par_desc|contact axis in gripper coordinate.|
|par_type|TYPE|
|par_unit|$none$|
|par_required|0|
|par_default|Z|
|par_option|X -X Y -Y Z -Z|

|par_name|contactForce|
| :---: | :---: |
|par_desc|target contact force in tcp coordinate that robot output on pre-set force control axis|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|0|
|par_default|5|
|par_min|1.0|
|par_max|6.0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|curWidth|DOUBLE|current width between gripper fingers|
|reachedForce|BOOL|flag to indicate if force between gripper and object reaches set value|
|reachedWidth|BOOL|flag to indicate if width between gripper fingers reaches set value|
|isMoving|BOOL|flag to indicate if gripper fingers are moving|
  
Below is the detailed description of each parameter:
|par_name|curWidth|
| :---: | :---: |
|par_desc|current width between gripper fingers|
|par_type|DOUBLE|
|par_unit|$m$|

|par_name|reachedForce|
| :---: | :---: |
|par_desc|flag to indicate if force between gripper and object reaches set value|
|par_type|BOOL|
|par_unit|$none$|

|par_name|reachedWidth|
| :---: | :---: |
|par_desc|flag to indicate if width between gripper fingers reaches set value|
|par_type|BOOL|
|par_unit|$none$|

|par_name|isMoving|
| :---: | :---: |
|par_desc|flag to indicate if gripper fingers are moving|
|par_type|BOOL|
|par_unit|$none$|

### [ContactGripInt](#contactgripint)


This primitive is designed to grasp small/thin object which is OUTSIDE gripper fingers and on a flat surface. The 
gripper contacts the surface first and keeps maintaining the contact while opening fingers.  


#### Primitive Description and Usage

PT\_ContactGrip consists of two primitives: **[ContactGripExt](#contactgripext)** and **[ContactGripInt](#contactgripint)**. They are the same except that gripper fingers opening in [ContactGripInt](#contactgripint)( to grip object from internal) and closing in [ContactGripExt](#contactgripext)(to grip object from external).

This primitive is designed to grip small/thin object on flat surface. The gripper contacts the surface first and keeps maintaining the contact while closing/opening fingers. User can specify the contact force in primitive parameter. 


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|gripSpeed|DOUBLE|gripper finger closing moving|
|gripWidth|DOUBLE|gripper target open width|
|maxGripForce|DOUBLE|maximum grip force between gripper and object|
|contactTCPAxis|TYPE|contact axis in gripper coordinate.|
|contactForce|DOUBLE|target contact force in tcp coordinate that robot output on pre-set force control axis|
  
Below is the detailed description of each parameter:
|par_name|gripSpeed|
| :---: | :---: |
|par_desc|gripper finger closing moving|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_default|0.01|
|par_required|0|
|par_min|0.0|
|par_max|0.05|

|par_name|gripWidth|
| :---: | :---: |
|par_desc|gripper target open width|
|par_unit|$m$|
|par_type|DOUBLE|
|par_required|0|
|par_default|0.1|
|par_min|0.0|
|par_max|0.1|

|par_name|maxGripForce|
| :---: | :---: |
|par_desc|maximum grip force between gripper and object|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|0|
|par_default|30.0|
|par_min|0.0|
|par_max|50.0|

|par_name|contactTCPAxis|
| :---: | :---: |
|par_desc|contact axis in gripper coordinate.|
|par_type|TYPE|
|par_unit|$none$|
|par_required|0|
|par_default|Z|
|par_option|X -X Y -Y Z -Z|

|par_name|contactForce|
| :---: | :---: |
|par_desc|target contact force in tcp coordinate that robot output on pre-set force control axis|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|0|
|par_default|5|
|par_min|1.0|
|par_max|6.0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|curWidth|DOUBLE|current width between gripper fingers|
|reachedForce|BOOL|flag to indicate if force between gripper and object reaches set value|
|reachedWidth|BOOL|flag to indicate if width between gripper fingers reaches set value|
|isMoving|BOOL|flag to indicate if gripper fingers are moving|
  
Below is the detailed description of each parameter:
|par_name|curWidth|
| :---: | :---: |
|par_desc|current width between gripper fingers|
|par_type|DOUBLE|
|par_unit|$m$|

|par_name|reachedForce|
| :---: | :---: |
|par_desc|flag to indicate if force between gripper and object reaches set value|
|par_type|BOOL|
|par_unit|$none$|

|par_name|reachedWidth|
| :---: | :---: |
|par_desc|flag to indicate if width between gripper fingers reaches set value|
|par_type|BOOL|
|par_unit|$none$|

|par_name|isMoving|
| :---: | :---: |
|par_desc|flag to indicate if gripper fingers are moving|
|par_type|BOOL|
|par_unit|$none$|

### [Grasp](#grasp)


When a gripper is connected with the robot, this primitive controls the motion and force of the gripper.  


#### Primitive Description and Usage

PT\_Gasp is a simple grasp primitive, which allows user to open or close the grippers with predefined velocity and force. It can only be used for those grippers which are already be supported by the robot.

**User should know that PT\_GRASP just provide a simple way to manipulate grippers, all its function can also be done through tool command, which may save much more time in application.** 


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|speed|DOUBLE|gripper moving speed|
|targetWidth|DOUBLE|gripper target width|
|graspForce|DOUBLE|maximum grasping force|
|waitForActionComplete|BOOL|if true, the primitive will only be terminated after the grasp action is completed|
  
Below is the detailed description of each parameter:
|par_name|speed|
| :---: | :---: |
|par_desc|gripper moving speed|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|1|
|par_min|0.0|

|par_name|targetWidth|
| :---: | :---: |
|par_desc|gripper target width|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|1|
|par_min|0.0|

|par_name|graspForce|
| :---: | :---: |
|par_desc|maximum grasping force|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|1|
|par_min|0.0|

|par_name|waitForActionComplete|
| :---: | :---: |
|par_desc|if true, the primitive will only be terminated after the grasp action is completed|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|1|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|curWidth|DOUBLE|current width between gripper fingers|
|reachedForce|BOOL|flag to indicate if force between gripper and object reaches set value|
|reachedWidth|BOOL|flag to indicate if width between gripper fingers reaches set value|
|isMoving|BOOL|flag to indicate if gripper fingers are moving|
  
Below is the detailed description of each parameter:
|par_name|curWidth|
| :---: | :---: |
|par_desc|current width between gripper fingers|
|par_type|DOUBLE|
|par_unit|$m$|

|par_name|reachedForce|
| :---: | :---: |
|par_desc|flag to indicate if force between gripper and object reaches set value|
|par_type|BOOL|
|par_unit|$none$|

|par_name|reachedWidth|
| :---: | :---: |
|par_desc|flag to indicate if width between gripper fingers reaches set value|
|par_type|BOOL|
|par_unit|$none$|

|par_name|isMoving|
| :---: | :---: |
|par_desc|flag to indicate if gripper fingers are moving|
|par_type|BOOL|
|par_unit|$none$|

## Assembly

### [SlideSpiral](#slidespiral)


With this primitive, the robot will use hybrid force-motion control to search for a hole within a circular area on a 
surface by following an increasingly dense spiral trajecotry. The search will be carried out by maintaining a certain 
contact force on the surface, while moving on the surface.  


#### Primitive Description and Usage

* **Description**: This primitive provides a mechanism for a user to apply force-search to find the hole in peg-in-hole applications. Specifically, it allows a user to command the robot to search within a circular area along an increasingly dense spiral trajectory on a surface while maintaining a certain contact force.
* **Example Usage:** prior to a peg--in-hole operation


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|contactAxis|VEC_3d|contact (force control) axis in tcp frame, it has to be one of tcp's principal axes|
|searchAxis|VEC_3d|search axis in tcp frame, it has to be perpendicular to the contact axis|
|contactForce|DOUBLE|contact force when searching on the surface|
|radius|DOUBLE|search area radius|
|startDensity|INT|how many times the geometry pattern will be drawn in the start cycle|
|timeFactor|INT|time factor for how long it takes for theta to go through 2PI (setting this value too small when the radius is large, i.e., drawing a large geometric pattern very fast, may cause to robot to exceed its capabilities and stop); in manual mode, this factor is doubled irrelevant of the speed percentage|
|wiggleRange|DOUBLE|tcp wiggle range along the contact axis for finding the right angle when searching, if this parameter is set to a large value, make sure to increase the wigglePeriod, otherwise the robot may exceed its capabilities|
|wigglePeriod|DOUBLE|time period for tcp to wiggle along the contact axis back and force one time (setting this value too small will likely cause the robot to exceed its capabilities and stop, especially when the wiggle motion is not along the z-axis of the robot flange); in manual mode, this factor is doubled irrelevant of the speed percentage|
|randomFactor|DOUBLE|a factor in [0, 1] controlling how much randomness will be added to the slide trajecotry|
  
Below is the detailed description of each parameter:
|par_name|contactAxis|
| :---: | :---: |
|par_desc|contact (force control) axis in tcp frame, it has to be one of tcp's principal axes|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0.0 0.0 1.0|

|par_name|searchAxis|
| :---: | :---: |
|par_desc|search axis in tcp frame, it has to be perpendicular to the contact axis|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|1.0 0.0 0.0|

|par_name|contactForce|
| :---: | :---: |
|par_desc|contact force when searching on the surface|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$N$|
|par_min|5|
|par_max|20|
|par_default|5|

|par_name|radius|
| :---: | :---: |
|par_desc|search area radius|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.015|
|par_min|0.0002|
|par_max|0.015|

|par_name|startDensity|
| :---: | :---: |
|par_desc|how many times the geometry pattern will be drawn in the start cycle|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|2|
|par_min|1|
|par_max|5|

|par_name|timeFactor|
| :---: | :---: |
|par_desc|time factor for how long it takes for theta to go through 2PI (setting this value too small when the radius is large, i.e., drawing a large geometric pattern very fast, may cause to robot to exceed its capabilities and stop); in manual mode, this factor is doubled irrelevant of the speed percentage|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|2|
|par_min|1|
|par_max|10|

|par_name|wiggleRange|
| :---: | :---: |
|par_desc|tcp wiggle range along the contact axis for finding the right angle when searching, if this parameter is set to a large value, make sure to increase the wigglePeriod, otherwise the robot may exceed its capabilities|
|par_type|DOUBLE|
|par_unit|$deg$|
|par_required|0|
|par_default|0|
|par_min|0|
|par_max|90|

|par_name|wigglePeriod|
| :---: | :---: |
|par_desc|time period for tcp to wiggle along the contact axis back and force one time (setting this value too small will likely cause the robot to exceed its capabilities and stop, especially when the wiggle motion is not along the z-axis of the robot flange); in manual mode, this factor is doubled irrelevant of the speed percentage|
|par_type|DOUBLE|
|par_unit|$s$|
|par_required|0|
|par_default|0.3|
|par_min|0.2|
|par_max|30|

|par_name|randomFactor|
| :---: | :---: |
|par_desc|a factor in [0, 1] controlling how much randomness will be added to the slide trajecotry|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$none$|
|par_min|0|
|par_max|1|
|par_default|0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|searchResistanceForce|DOUBLE|search plane force magnitude indicating collision or resistance|
|pushDistance|DOUBLE|how much the tcp has pushed into the surface, could signal a successful find (how the tcp has moved away from the surface will not be checked)|
|forceDrop|DOUBLE|how much the force has dropped from the set contact force, could signal a successful find (when tcp finds the hole and loses contact with the surface, the measured force is ideally zero, and the force drop from the set value is at most of the magnitude of the set contact force)|
|lostContact|BOOL|a flag indicating lost of contact, user is suggested to handle it by getting the PT transit back to contact if this flag is turned on|
  
Below is the detailed description of each parameter:
|par_name|searchResistanceForce|
| :---: | :---: |
|par_desc|search plane force magnitude indicating collision or resistance|
|par_type|DOUBLE|
|par_unit|$N$|

|par_name|pushDistance|
| :---: | :---: |
|par_desc|how much the tcp has pushed into the surface, could signal a successful find (how the tcp has moved away from the surface will not be checked)|
|par_type|DOUBLE|
|par_unit|$m$|

|par_name|forceDrop|
| :---: | :---: |
|par_desc|how much the force has dropped from the set contact force, could signal a successful find (when tcp finds the hole and loses contact with the surface, the measured force is ideally zero, and the force drop from the set value is at most of the magnitude of the set contact force)|
|par_type|DOUBLE|
|par_unit|$N$|

|par_name|lostContact|
| :---: | :---: |
|par_desc|a flag indicating lost of contact, user is suggested to handle it by getting the PT transit back to contact if this flag is turned on|
|par_type|BOOL|
|par_unit|$none$|

### [SlideZigzag](#slidezigzag)


With this primitive, the robot will use hybrid force-motion control to search for a hole within a rectangular area on a 
surface by following an increasingly dense zigzag trajecotry. The search will be carried out by maintaining a certain 
contact force on the surface, while moving on the surface.  


#### Primitive Description and Usage

* **Description:**This primitive provides a mechanism for a user to apply force-search to find the hole in peg-in-hole applications. Specifically, it allows a user to command the robot to search within a rectangular area along an increasingly dense zigzag trajectory on a surface while maintaining a certain contact force.
* **Example Usage:** prior to a peg--in-hole operation


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|contactAxis|VEC_3d|contact (force control) axis in tcp frame, it has to be one of tcp's principal axes|
|searchAxis|VEC_3d|search axis in tcp frame, it has to be perpendicular to the contact axis|
|contactForce|DOUBLE|contact force when searching on the surface|
|length|DOUBLE|search area length (along the search axis)|
|height|DOUBLE|search area height (perpendicular to the search and contact axis)|
|startDensity|INT|how many times the geometry pattern will be drawn in the start cycle|
|timeFactor|INT|time factor for how long it takes to draw one complete zigzag (setting this value too small when the radius is large, i.e., drawing a large geometric pattern very fast, may cause to robot to exceed its capabilities and stop); in manual mode, this factor is doubled irrelevant of the speed percentage|
|wiggleRange|DOUBLE|tcp wiggle range along the contact axis for finding the right angle when searching, if this parameter is set to a large value, make sure to increase the wigglePeriod, otherwise the robot may exceed its capabilities|
|wigglePeriod|DOUBLE|time period for tcp to wiggle along the contact axis back and force one time (setting this value too small will likely cause the robot to exceed its capabilities and stop, especially when the wiggle motion is not along the z-axis of the robot flange); in manual mode, this factor is doubled irrelevant of the speed percentage|
|randomFactor|DOUBLE|a factor in [0, 1] controlling how much randomness will be added to the slide trajecotry|
  
Below is the detailed description of each parameter:
|par_name|contactAxis|
| :---: | :---: |
|par_desc|contact (force control) axis in tcp frame, it has to be one of tcp's principal axes|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0.0 0.0 1.0|

|par_name|searchAxis|
| :---: | :---: |
|par_desc|search axis in tcp frame, it has to be perpendicular to the contact axis|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|1.0 0.0 0.0|

|par_name|contactForce|
| :---: | :---: |
|par_desc|contact force when searching on the surface|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$N$|
|par_min|5|
|par_max|20|
|par_default|5|

|par_name|length|
| :---: | :---: |
|par_desc|search area length (along the search axis)|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.03|
|par_min|0.0002|
|par_max|0.03|

|par_name|height|
| :---: | :---: |
|par_desc|search area height (perpendicular to the search and contact axis)|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.03|
|par_min|0.0002|
|par_max|0.03|

|par_name|startDensity|
| :---: | :---: |
|par_desc|how many times the geometry pattern will be drawn in the start cycle|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|2|
|par_min|1|
|par_max|5|

|par_name|timeFactor|
| :---: | :---: |
|par_desc|time factor for how long it takes to draw one complete zigzag (setting this value too small when the radius is large, i.e., drawing a large geometric pattern very fast, may cause to robot to exceed its capabilities and stop); in manual mode, this factor is doubled irrelevant of the speed percentage|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|2|
|par_min|1|
|par_max|10|

|par_name|wiggleRange|
| :---: | :---: |
|par_desc|tcp wiggle range along the contact axis for finding the right angle when searching, if this parameter is set to a large value, make sure to increase the wigglePeriod, otherwise the robot may exceed its capabilities|
|par_type|DOUBLE|
|par_unit|$deg$|
|par_required|0|
|par_default|0|
|par_min|0|
|par_max|90|

|par_name|wigglePeriod|
| :---: | :---: |
|par_desc|time period for tcp to wiggle along the contact axis back and force one time (setting this value too small will likely cause the robot to exceed its capabilities and stop, especially when the wiggle motion is not along the z-axis of the robot flange); in manual mode, this factor is doubled irrelevant of the speed percentage|
|par_type|DOUBLE|
|par_unit|$s$|
|par_required|0|
|par_default|0.2|
|par_min|0.2|
|par_max|30|

|par_name|randomFactor|
| :---: | :---: |
|par_desc|a factor in [0, 1] controlling how much randomness will be added to the slide trajecotry|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$none$|
|par_min|0|
|par_max|1|
|par_default|0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|searchResistanceForce|DOUBLE|search plane force indicating collision or resistance|
|pushDistance|DOUBLE|how much the tcp has pushed into the surface, could signal a successful find (how the tcp has moved away from the surface will not be checked)|
|forceDrop|DOUBLE|how much the force has dropped from the set contact force, could signal a successful find (when tcp finds the hole and loses contact with the surface, the measured force is ideally zero, and the force drop from the set value is at most of the magnitude of the set contact force)|
|lostContact|BOOL|a flag indicating lost of contact, user is suggested to handle it by getting the PT transit back to contact if this flag is turned on|
  
Below is the detailed description of each parameter:
|par_name|searchResistanceForce|
| :---: | :---: |
|par_desc|search plane force indicating collision or resistance|
|par_type|DOUBLE|
|par_unit|$N$|

|par_name|pushDistance|
| :---: | :---: |
|par_desc|how much the tcp has pushed into the surface, could signal a successful find (how the tcp has moved away from the surface will not be checked)|
|par_type|DOUBLE|
|par_unit|$m$|

|par_name|forceDrop|
| :---: | :---: |
|par_desc|how much the force has dropped from the set contact force, could signal a successful find (when tcp finds the hole and loses contact with the surface, the measured force is ideally zero, and the force drop from the set value is at most of the magnitude of the set contact force)|
|par_type|DOUBLE|
|par_unit|$N$|

|par_name|lostContact|
| :---: | :---: |
|par_desc|a flag indicating lost of contact, user is suggested to handle it by getting the PT transit back to contact if this flag is turned on|
|par_type|BOOL|
|par_unit|$none$|

### [PihSpiral](#pihspiral)


This plan primitive combines [CaliForceSensor](#califorcesensor), [Contact](#contact), and [SlideSpiral](#slidespiral) primitives for the robot to perform a peg-in-hole
 search operation. It is intended to provide a simplest example to illustrate the pre-steps of using [SlideSpiral](#slidespiral). Real 
applications are often case-specific, we recommend users to use this as a reference and make their own plans and 
adjustments, such as including [PihCheckTran](#pihchecktran) for robust performance.  


#### Primitive Description and Usage

* **Description**: This primitive provides a Peg-in-Hole strategy that uses repeated **spiral** trajectories and hybrid force-motion control to find and insert a peg in a hole within a **circular** area. It handles environmental uncertainties in peg-in-hole applications where the peg position errors are too large for traditional position-based control methods to handle.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|contactVel|DOUBLE|robot Cartesian moving velocity to contact environment|
|contactAxis|VEC_3d|contact (force control) axis in tcp frame, it has to be one of tcp's principal axes|
|searchAxis|VEC_3d|search axis in tcp frame, it has to be perpendicular to the contact axis|
|contactForce|DOUBLE|contact force when searching on the surface|
|pushDistance|DOUBLE|contact axis push distance indicating a successful find|
|forceDrop|DOUBLE|how much the force has dropped from the set contact force, could signal a successful find; NOTICE that when tcp finds the hole and loses contact with the surface, the measured force is ideally zero, and the force drop from the set value is at most of the magnitude of the set contact force|
|radius|DOUBLE|max circle radius|
|timeFactor|INT|time factor for how long it takes for theta to go through 2PI (setting this value too small when the radius is large, i.e., drawing a large geometric pattern very fast, may cause to robot to exceed its capabilities ans stop)|
|wiggleRange|DOUBLE|tcp wiggle range along the contact axis for finding the right angle when searching|
|wigglePeriod|DOUBLE|time period for tcp to wiggle along the contact axis back and force one time (setting this value too small will likely cause the robot to exceed its capabilities and stop, especially when the wiggle motion is not along the z-axis of the robot flange)|
|startDensity|INT|how many times the geometry pattern will be drawn in the start cycle|
|randomFactor|DOUBLE|a factor in [0, 1] controlling how much randomness will be added to the slide trajecotry|
  
Below is the detailed description of each parameter:
|par_name|contactVel|
| :---: | :---: |
|par_desc|robot Cartesian moving velocity to contact environment|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|0.01|
|par_max|0.1|
|par_min|0.001|

|par_name|contactAxis|
| :---: | :---: |
|par_desc|contact (force control) axis in tcp frame, it has to be one of tcp's principal axes|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0.0 0.0 1.0|

|par_name|searchAxis|
| :---: | :---: |
|par_desc|search axis in tcp frame, it has to be perpendicular to the contact axis|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|1.0 0.0 0.0|

|par_name|contactForce|
| :---: | :---: |
|par_desc|contact force when searching on the surface|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$N$|
|par_min|5|
|par_max|20|
|par_default|8|

|par_name|pushDistance|
| :---: | :---: |
|par_desc|contact axis push distance indicating a successful find|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.005|
|par_min|0.002|
|par_max|0.02|

|par_name|forceDrop|
| :---: | :---: |
|par_desc|how much the force has dropped from the set contact force, could signal a successful find; NOTICE that when tcp finds the hole and loses contact with the surface, the measured force is ideally zero, and the force drop from the set value is at most of the magnitude of the set contact force|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$N$|
|par_min|2|
|par_max|20|
|par_default|7|

|par_name|radius|
| :---: | :---: |
|par_desc|max circle radius|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.015|
|par_min|0.0002|
|par_max|0.015|

|par_name|timeFactor|
| :---: | :---: |
|par_desc|time factor for how long it takes for theta to go through 2PI (setting this value too small when the radius is large, i.e., drawing a large geometric pattern very fast, may cause to robot to exceed its capabilities ans stop)|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|2|
|par_min|1|
|par_max|10|

|par_name|wiggleRange|
| :---: | :---: |
|par_desc|tcp wiggle range along the contact axis for finding the right angle when searching|
|par_type|DOUBLE|
|par_unit|$deg$|
|par_required|0|
|par_default|0|
|par_min|0|
|par_max|10|

|par_name|wigglePeriod|
| :---: | :---: |
|par_desc|time period for tcp to wiggle along the contact axis back and force one time (setting this value too small will likely cause the robot to exceed its capabilities and stop, especially when the wiggle motion is not along the z-axis of the robot flange)|
|par_type|DOUBLE|
|par_unit|$s$|
|par_required|0|
|par_default|0.3|
|par_min|0.2|
|par_max|9|

|par_name|startDensity|
| :---: | :---: |
|par_desc|how many times the geometry pattern will be drawn in the start cycle|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|2|
|par_min|1|
|par_max|5|

|par_name|randomFactor|
| :---: | :---: |
|par_desc|a factor in [0, 1] controlling how much randomness will be added to the slide trajecotry|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$none$|
|par_min|0|
|par_max|1|
|par_default|0|

### [PihZigzag](#pihzigzag)


This plan primitive combines [CaliForceSensor](#califorcesensor), [Contact](#contact), and [SlideZigzag](#slidezigzag) primitives for the robot to perform a peg-in-hole
 search operation. It is intended to provide a simplest example to illustrate the pre-steps of using [SlideZigzag](#slidezigzag). Real 
applications are often case-specific, we recommend users to use this as a reference and make their own plans and 
adjustments, such as including [PihCheckTran](#pihchecktran) for robust performance.  


#### Primitive Description and Usage

* **Description**: This primitive provides a Peg-in-Hole strategy that uses repeated **zigzag** trajectories and hybrid force-motion control to find and insert a peg in a hole within a **rectangular** area. It handles environmental uncertainties in peg-in-hole applications where the peg position errors are too large for traditional position-based control methods to handle.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|contactVel|DOUBLE|robot Cartesian moving velocity to contact environment|
|contactAxis|VEC_3d|insertion (force control) axis in tcp frame, it has to be along one of tcp's principal axes|
|searchAxis|VEC_3d|search axis in tcp frame, it has to be perpendicular to the contactAxis|
|contactForce|DOUBLE|contact force when searching on the surface|
|pushDistance|DOUBLE|contact axis push distance indicating a successful find|
|forceDrop|DOUBLE|how much the force has dropped from the set contact force, could signal a successful find; NOTICE that when tcp finds the hole and loses contact with the surface, the measured force is ideally zero, and the force drop from the set value is at most of the magnitude of the set contact force|
|length|DOUBLE|rectangle length (along the search axis)|
|height|DOUBLE|rectangle height (perpendicular to the search axis)|
|timeFactor|INT|time factor for how long it takes for theta to go through 2PI (setting this value too small when the radius is large, i.e., drawing a large geometric pattern very fast, may cause to robot to exceed its capabilities ans stop)|
|wiggleRange|DOUBLE|tcp wiggle range along the contact axis for finding the right angle when searching|
|wigglePeriod|DOUBLE|time period for tcp to wiggle along the contact axis back and force one time (setting this value too small will likely cause the robot to exceed its capabilities and stop, especially when the wiggle motion is not along the z-axis of the robot flange)|
|startDensity|INT|how many times the geometry pattern will be drawn in the start cycle|
|randomFactor|DOUBLE|a factor in [0, 1] controlling how much randomness will be added to the slide trajecotry|
  
Below is the detailed description of each parameter:
|par_name|contactVel|
| :---: | :---: |
|par_desc|robot Cartesian moving velocity to contact environment|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|0.01|
|par_max|0.1|
|par_min|0.001|

|par_name|contactAxis|
| :---: | :---: |
|par_desc|insertion (force control) axis in tcp frame, it has to be along one of tcp's principal axes|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0.0 0.0 1.0|

|par_name|searchAxis|
| :---: | :---: |
|par_desc|search axis in tcp frame, it has to be perpendicular to the contactAxis|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|1.0 0.0 0.0|

|par_name|contactForce|
| :---: | :---: |
|par_desc|contact force when searching on the surface|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$N$|
|par_min|5|
|par_max|20|
|par_default|8|

|par_name|pushDistance|
| :---: | :---: |
|par_desc|contact axis push distance indicating a successful find|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.005|
|par_min|0.002|
|par_max|0.02|

|par_name|forceDrop|
| :---: | :---: |
|par_desc|how much the force has dropped from the set contact force, could signal a successful find; NOTICE that when tcp finds the hole and loses contact with the surface, the measured force is ideally zero, and the force drop from the set value is at most of the magnitude of the set contact force|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$N$|
|par_min|2|
|par_max|20|
|par_default|7|

|par_name|length|
| :---: | :---: |
|par_desc|rectangle length (along the search axis)|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.03|
|par_min|0.0002|
|par_max|0.03|

|par_name|height|
| :---: | :---: |
|par_desc|rectangle height (perpendicular to the search axis)|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.03|
|par_min|0.0002|
|par_max|0.03|

|par_name|timeFactor|
| :---: | :---: |
|par_desc|time factor for how long it takes for theta to go through 2PI (setting this value too small when the radius is large, i.e., drawing a large geometric pattern very fast, may cause to robot to exceed its capabilities ans stop)|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|2|
|par_min|1|
|par_max|10|

|par_name|wiggleRange|
| :---: | :---: |
|par_desc|tcp wiggle range along the contact axis for finding the right angle when searching|
|par_type|DOUBLE|
|par_unit|$deg$|
|par_required|0|
|par_default|0|
|par_min|0|
|par_max|10|

|par_name|wigglePeriod|
| :---: | :---: |
|par_desc|time period for tcp to wiggle along the contact axis back and force one time (setting this value too small will likely cause the robot to exceed its capabilities and stop, especially when the wiggle motion is not along the z-axis of the robot flange)|
|par_type|DOUBLE|
|par_unit|$s$|
|par_required|0|
|par_default|0.3|
|par_min|0.2|
|par_max|9|

|par_name|startDensity|
| :---: | :---: |
|par_desc|how many times the geometry pattern will be drawn in the start cycle|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|2|
|par_min|1|
|par_max|5|

|par_name|randomFactor|
| :---: | :---: |
|par_desc|a factor in [0, 1] controlling how much randomness will be added to the slide trajecotry|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$none$|
|par_min|0|
|par_max|1|
|par_default|0|

### [SlideMating](#slidemating)


This primitive uses hybrid motion-force control to repeatedly move along a line trajectory as well as appling force to 
assist parts-mating operations in assembly applications.  


#### Primitive Description and Usage

* **Description**: This primitive uses hybrid motion-force control to repeatedly move along a **line** trajectory while applying a certain force in a specific direction.
* **Example Usage:** This primitive is mainly designed to assist parts-mating operations in assembly applications.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|matingDir|VEC_3d|mating slide direction in tcp coordiante, could be any direction vector|
|forceDir|VEC_3d|force control axis in tcp coordiante, could be any direction vector|
|matingRange|DOUBLE|slide mating range|
|maxMatingVel|DOUBLE|max slide velocity|
|totalMatingTimes|INT|total number of mating times. if set as 0, robot would run the range one-way for once|
|matingForce|DOUBLE|force during mating in tcp coordinate|
|safetyForce|DOUBLE|max force during mating for safety|
|maxMotionDisInForceDir|DOUBLE|max motion distance in force control direction, primitive would terminate if exceed this value".|
  
Below is the detailed description of each parameter:
|par_name|matingDir|
| :---: | :---: |
|par_desc|mating slide direction in tcp coordiante, could be any direction vector|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0 1 0|

|par_name|forceDir|
| :---: | :---: |
|par_desc|force control axis in tcp coordiante, could be any direction vector|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 1|

|par_name|matingRange|
| :---: | :---: |
|par_desc|slide mating range|
|par_type|DOUBLE|
|par_unit|$m$|
|par_min|0.001|
|par_max|0.35|
|par_required|0|
|par_default|0.1|

|par_name|maxMatingVel|
| :---: | :---: |
|par_desc|max slide velocity|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_min|0.001|
|par_max|0.5|
|par_required|0|
|par_default|0.1|

|par_name|totalMatingTimes|
| :---: | :---: |
|par_desc|total number of mating times. if set as 0, robot would run the range one-way for once|
|par_type|INT|
|par_unit|$none$|
|par_min|0|
|par_max|1000|
|par_required|0|
|par_default|1|

|par_name|matingForce|
| :---: | :---: |
|par_desc|force during mating in tcp coordinate|
|par_type|DOUBLE|
|par_unit|$N$|
|par_min|5|
|par_max|50|
|par_required|0|
|par_default|15|

|par_name|safetyForce|
| :---: | :---: |
|par_desc|max force during mating for safety|
|par_type|DOUBLE|
|par_unit|$N$|
|par_min|20|
|par_max|80|
|par_required|0|
|par_default|50.0|

|par_name|maxMotionDisInForceDir|
| :---: | :---: |
|par_desc|max motion distance in force control direction, primitive would terminate if exceed this value".|
|par_type|DOUBLE|
|par_unit|$m$|
|par_min|0.005|
|par_max|0.5|
|par_required|0|
|par_default|0.05|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|matingFinished|BOOL|flag if mating is finished|
  
Below is the detailed description of each parameter:
|par_name|matingFinished|
| :---: | :---: |
|par_desc|flag if mating is finished|
|par_type|BOOL|
|par_unit|$none$|

### [RubMating](#rubmating)


This primitive uses hybrid motion-force control to repeatedly rotate robot TCP as well as appling force to assist parts-
mating operations in assembly applications.  


#### Primitive Description and Usage

* **Description**: This primitive uses hybrid motion-force control to repeatedly **rotate robot’s TCP** along a fixed axis while applying a certain force in a specific direction
* **Example Usage:** This primitive is mainly designed to assist parts-mating operations in assembly applications.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|matingDir|VEC_3d|rub mating direction in tcp coordiante, could be any direction vector|
|forceDir|VEC_3d|force control axis in tcp coordiante, could be any direction vector|
|matingRange|DOUBLE|rub range|
|maxMatingVel|DOUBLE|max rub velocity|
|totalMatingTimes|INT|total number of mating times. if set as 0, robot would run the range one-way for once|
|matingForce|DOUBLE|force during rub mating in tcp coordinate|
|safetyForce|DOUBLE|max force during mating for safety|
|maxMotionDisInForceDir|DOUBLE|max motion distance in force control direction, primitive would terminate if exceed this value".|
  
Below is the detailed description of each parameter:
|par_name|matingDir|
| :---: | :---: |
|par_desc|rub mating direction in tcp coordiante, could be any direction vector|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|1 0 0|

|par_name|forceDir|
| :---: | :---: |
|par_desc|force control axis in tcp coordiante, could be any direction vector|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 1|

|par_name|matingRange|
| :---: | :---: |
|par_desc|rub range|
|par_type|DOUBLE|
|par_unit|$deg$|
|par_min|1|
|par_max|60|
|par_required|0|
|par_default|10|

|par_name|maxMatingVel|
| :---: | :---: |
|par_desc|max rub velocity|
|par_type|DOUBLE|
|par_unit|$deg/s$|
|par_min|1.0|
|par_max|60.0|
|par_required|0|
|par_default|10|

|par_name|totalMatingTimes|
| :---: | :---: |
|par_desc|total number of mating times. if set as 0, robot would run the range one-way for once|
|par_type|INT|
|par_unit|$none$|
|par_min|0|
|par_max|1000|
|par_required|0|
|par_default|1|

|par_name|matingForce|
| :---: | :---: |
|par_desc|force during rub mating in tcp coordinate|
|par_type|DOUBLE|
|par_unit|$N$|
|par_min|5|
|par_max|50|
|par_required|0|
|par_default|15|

|par_name|safetyForce|
| :---: | :---: |
|par_desc|max force during mating for safety|
|par_type|DOUBLE|
|par_unit|$N$|
|par_min|20|
|par_max|80|
|par_required|0|
|par_default|50.0|

|par_name|maxMotionDisInForceDir|
| :---: | :---: |
|par_desc|max motion distance in force control direction, primitive would terminate if exceed this value".|
|par_type|DOUBLE|
|par_unit|$m$|
|par_min|0.005|
|par_max|0.5|
|par_required|0|
|par_default|0.05|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|matingFinished|BOOL|flag if mating is finished|
  
Below is the detailed description of each parameter:
|par_name|matingFinished|
| :---: | :---: |
|par_desc|flag if mating is finished|
|par_type|BOOL|
|par_unit|$none$|

### [Sleeve](#sleeve)


This primitive is used to perform sleeve action, plugging a bolt into a hole, for example. Robot would insert in 
predefined direction and adjust its position and orientation at the same time if it gets stuck druing the insertion 
motion.  


#### Primitive Description and Usage

* **Description**: In this primitive, the robot moves in a predefined insertion direction until the total external force reaches a set value. Then the robot will adjust its position and orientation in all directions except for the insertion direction(as long as the external force in the corresponding direction exceeds the dead band). During the adjustment, the robot would stop the insertion motion.
* **Example Usage:** This can be used in many fine assembly situations, like gear box assembly, peg-in-hole assembly, or putting a sleeve(a hollow cylinder) on a shaft, such as in a machine tending application.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|insertDir|TYPE|insert direction in tool coordinate.|
|alignmentDir|VEC_6i|alignment direction in tool coordinate. It could be 0 or 1 for each axis. if set as 1, the robot would be force compliant in corresponding axis. For example, (0,1,0,1,0,0) means compliant in linear y and rotation x axis|
|maxContactForce|DOUBLE|maximum contact force between robot and environment. Robot would stop insertion if contact force exceed this value, and adjust its position and orientation if needed|
|deadbandScale|DOUBLE|robot alignment wrench deadband scale. 0 means no deadband. Robot would not adjust its position or orientation when external wrench is smaller than deadband|
|insertVel|DOUBLE|velocity in insertion direction|
|adjustVelScale|DOUBLE|scale of adjustment speed to observed external wrench. Robot would adjust its pose faster when this valuse is bigger, but may become less stable. The default value is recommended.|
  
Below is the detailed description of each parameter:
|par_name|insertDir|
| :---: | :---: |
|par_desc|insert direction in tool coordinate.|
|par_type|TYPE|
|par_required|1|
|par_unit|$none$|
|par_option|X -X Y -Y Z -Z|

|par_name|alignmentDir|
| :---: | :---: |
|par_desc|alignment direction in tool coordinate. It could be 0 or 1 for each axis. if set as 1, the robot would be force compliant in corresponding axis. For example, (0,1,0,1,0,0) means compliant in linear y and rotation x axis|
|par_type|VEC_6i|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 0 0 0 0|
|par_max|1 1 1 1 1 1|
|par_min|0 0 0 0 0 0|

|par_name|maxContactForce|
| :---: | :---: |
|par_desc|maximum contact force between robot and environment. Robot would stop insertion if contact force exceed this value, and adjust its position and orientation if needed|
|par_type|DOUBLE|
|par_unit|$N$|
|par_min|1|
|par_max|30|
|par_required|0|
|par_default|5|

|par_name|deadbandScale|
| :---: | :---: |
|par_desc|robot alignment wrench deadband scale. 0 means no deadband. Robot would not adjust its position or orientation when external wrench is smaller than deadband|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_min|0.0|
|par_max|1.0|
|par_default|0.5|

|par_name|insertVel|
| :---: | :---: |
|par_desc|velocity in insertion direction|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|0.01|
|par_max|0.03|
|par_min|0.001|

|par_name|adjustVelScale|
| :---: | :---: |
|par_desc|scale of adjustment speed to observed external wrench. Robot would adjust its pose faster when this valuse is bigger, but may become less stable. The default value is recommended.|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.2|
|par_max|1.0|
|par_min|0.0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|insertDis|DOUBLE|robot moving distance in insert direction|
|isMoving|BOOL|flag if robot is still moving|
  
Below is the detailed description of each parameter:
|par_name|insertDis|
| :---: | :---: |
|par_desc|robot moving distance in insert direction|
|par_type|DOUBLE|
|par_unit|$m$|

|par_name|isMoving|
| :---: | :---: |
|par_desc|flag if robot is still moving|
|par_type|BOOL|
|par_unit|$none$|

### [RasterSlideMating](#rasterslidemating)


This primitive uses hybrid motion-force control to repeatedly move along a zigzag trajectory as well as appling force to
 assist parts-mating operations in assembly applications.  


#### Primitive Description and Usage

* **Description**: This primitive uses hybrid motion-force control to repeatedly move along a **zigzag trajectory(raster)** while applying a certain force in a specific direction
* **Example Usage:** This primitive is mainly designed to assist parts-mating operations in assembly applications.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|matingDir|VEC_3d|mating slide direction in tcp coordiante, could be any direction vector|
|forceDir|VEC_3d|force control axis in tcp coordiante, could be any direction vector|
|matingRange|DOUBLE|mating range in slide direction|
|maxMatingVel|DOUBLE|max slide velocity|
|totalMatingTimes|INT|total number of mating times. if set as 0, robot would run the range one-way for once|
|matingForce|DOUBLE|force during mating in tcp coordinate|
|safetyForce|DOUBLE|max force during mating for safety|
|maxMotionDisInForceDir|DOUBLE|max motion distance in force control direction, primitive would terminate if exceed this value".|
|rasterRange|DOUBLE|raster range|
|maxRasterVel|DOUBLE|max raster velocity|
|rasterDir|VEC_3d|raster slide direction in tcp coordiante,|
  
Below is the detailed description of each parameter:
|par_name|matingDir|
| :---: | :---: |
|par_desc|mating slide direction in tcp coordiante, could be any direction vector|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0 1 0|

|par_name|forceDir|
| :---: | :---: |
|par_desc|force control axis in tcp coordiante, could be any direction vector|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 1|

|par_name|matingRange|
| :---: | :---: |
|par_desc|mating range in slide direction|
|par_type|DOUBLE|
|par_unit|$m$|
|par_min|0.001|
|par_max|0.35|
|par_required|0|
|par_default|0.1|

|par_name|maxMatingVel|
| :---: | :---: |
|par_desc|max slide velocity|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_min|0.001|
|par_max|0.5|
|par_required|0|
|par_default|0.1|

|par_name|totalMatingTimes|
| :---: | :---: |
|par_desc|total number of mating times. if set as 0, robot would run the range one-way for once|
|par_type|INT|
|par_unit|$none$|
|par_min|0|
|par_max|1000|
|par_required|0|
|par_default|1|

|par_name|matingForce|
| :---: | :---: |
|par_desc|force during mating in tcp coordinate|
|par_type|DOUBLE|
|par_unit|$N$|
|par_min|5|
|par_max|50|
|par_required|0|
|par_default|15|

|par_name|safetyForce|
| :---: | :---: |
|par_desc|max force during mating for safety|
|par_type|DOUBLE|
|par_unit|$N$|
|par_min|20|
|par_max|80|
|par_required|0|
|par_default|50.0|

|par_name|maxMotionDisInForceDir|
| :---: | :---: |
|par_desc|max motion distance in force control direction, primitive would terminate if exceed this value".|
|par_type|DOUBLE|
|par_unit|$m$|
|par_min|0.005|
|par_max|0.5|
|par_required|0|
|par_default|0.05|

|par_name|rasterRange|
| :---: | :---: |
|par_desc|raster range|
|par_type|DOUBLE|
|par_unit|$m$|
|par_min|0.001|
|par_max|0.1|
|par_required|0|
|par_default|0.05|

|par_name|maxRasterVel|
| :---: | :---: |
|par_desc|max raster velocity|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_min|0.001|
|par_max|0.5|
|par_required|0|
|par_default|0.1|

|par_name|rasterDir|
| :---: | :---: |
|par_desc|raster slide direction in tcp coordiante,|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|1 0 0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|matingFinished|BOOL|flag if mating is finished|
  
Below is the detailed description of each parameter:
|par_name|matingFinished|
| :---: | :---: |
|par_desc|flag if mating is finished|
|par_type|BOOL|
|par_unit|$none$|

### [PihCheckTran](#pihchecktran)


This PT helps check if a peg is already in a hole. The user will provide a contact axis, and a search axis perpendicular
 to the contact axis; a companion axis will be generated to form a frame. The robot will move toward the +searchAxis, 
-searchAxis, -companionAxis, +companionAxis. While moving along these axes if the robot goes out of the limit specified 
by searchRange, the PT will terminate and state pegIsInHole will be set to false, if the robot encounters force greater 
than searchForce along all these directions during the process, the PT will terminate and the pegIsInHolde is set to 
true.  


#### Primitive Description and Usage

* **Description**: This PT helps check if a peg is already in a hole. The user will provide a contact axis, and a search axis perpendicular to the contact axis; a companion axis will be generated to form a frame. The robot will move toward the `+searchAxis`, `-searchAxis`, `-companionAxis`, `+companionAxis`. While moving along these axes if the robot goes out of the limit specified by `searchRange`, the PT will terminate and state pegIsInHole will be set to false, if the robot encounters force greater than `searchForce` along all these directions during the process, the PT will terminate and the pegIsInHolde is set to true.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|contactAxis|VEC_3d|contact axis in tcp frame, it has to be along one of tcp's principal axes|
|searchAxis|VEC_3d|search axis in tcp frame, it has to be perpendicular to the insertion axis|
|searchRange|DOUBLE|a range within which the robot will make forward, backward, left, and right search motions|
|searchForce|DOUBLE|a force threshold for detecting if the robot can move along a search direction|
|searchVelocity|DOUBLE|the maximum TCP velocity for the search motions|
  
Below is the detailed description of each parameter:
|par_name|contactAxis|
| :---: | :---: |
|par_desc|contact axis in tcp frame, it has to be along one of tcp's principal axes|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|0.0 0.0 1.0|

|par_name|searchAxis|
| :---: | :---: |
|par_desc|search axis in tcp frame, it has to be perpendicular to the insertion axis|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|0|
|par_default|1.0 0.0 0.0|

|par_name|searchRange|
| :---: | :---: |
|par_desc|a range within which the robot will make forward, backward, left, and right search motions|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.01|
|par_min|0.001|
|par_max|0.1|

|par_name|searchForce|
| :---: | :---: |
|par_desc|a force threshold for detecting if the robot can move along a search direction|
|par_type|DOUBLE|
|par_required|0|
|par_unit|$N$|
|par_min|2|
|par_max|20|
|par_default|3|

|par_name|searchVelocity|
| :---: | :---: |
|par_desc|the maximum TCP velocity for the search motions|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_min|0.001|
|par_max|0.1|
|par_required|0|
|par_default|0.01|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|pegIsInHole|BOOL|whether or not the peg is already in the hole (it will be initially set to false, and updated when the PT is terminated to reflect the actual check result)|
  
Below is the detailed description of each parameter:
|par_name|pegIsInHole|
| :---: | :---: |
|par_desc|whether or not the peg is already in the hole (it will be initially set to false, and updated when the PT is terminated to reflect the actual check result)|
|par_type|BOOL|
|par_unit|$none$|

## Tray Loading

### [TrayUnloading](#trayunloading)


This primitive helps configure a tray unloading task  


#### Primitive Description and Usage

* This primitive helps configure a tray unloading task.
* Users can set the starting point of the pallet, the edge point and other parameters to let the arm automatically plan the movement path, which greatly reduces the time for writing the loading and unloading program and improves the programming efficiency.
* Through flexible detection, AI camera function, to solve most of the customer's on-site application problems


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|trayLoadingFile|FILE|tray unloading task file|
  
Below is the detailed description of each parameter:
|par_name|trayLoadingFile|
| :---: | :---: |
|par_desc|tray unloading task file|
|par_type|FILE|
|par_unit|$none$|
|par_required|1|
|par_option|.tl|

### [TrayLoading](#trayloading)


This primitive helps configure a tray loading task  


#### Primitive Description and Usage

* This primitive helps configure a tray loading task.
* Users can set the starting point of the pallet, the edge point and other parameters to let the arm automatically plan the movement path, which greatly reduces the time for writing the loading and unloading program and improves the programming efficiency.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|trayLoadingFile|FILE|tray loading task file|
  
Below is the detailed description of each parameter:
|par_name|trayLoadingFile|
| :---: | :---: |
|par_desc|tray loading task file|
|par_type|FILE|
|par_unit|$none$|
|par_required|1|
|par_option|.tl|

## Polishing

### [Polish](#polish)


Execute unified motion and force control in polish based on torque mode  


#### Primitive Description and Usage

* For polishing applications, users can use this primitive to run composed trajectories to cover the surface or edge of the work piece. The trajectory can be line, spline, circle and some pre-designed patterns. User can specify the contact forces between the robot and work piece in one or multiple directions.
* This primitive performs based on torque-mode so that it behaves well in accuracy of force control but lack of stiffness of motion control.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|fileName|FILE|name of the file that contains micro-lines|
|forceAxis|VEC_6i|force axis|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|equalRadius|DOUBLE|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|maxPathJerk|DOUBLE|maximum jerk along the path|
|maxCornerAcc|DOUBLE|maximum acceleration at corner|
|maxCornerJerk|DOUBLE|maximum jerk at corner|
|maxForceVel|DOUBLE|maximum force transition velocity|
|maxForceAcc|DOUBLE|maximum force transition acceleration|
|frictionViscousCoeff|DOUBLE|viscous coefficient of friction|
|edgeLearntTrajForceCtrlDir|INT|Force control direction, only used for edge learnt traj force ctrl frame, -1 or 1|
|edgeLearntTrajFrame|BOOL|Whether to use edge learnt trajectory force ctrl frame or normal tcp force ctrl frame, false for normal tcp frame|
  
Below is the detailed description of each parameter:
|par_name|fileName|
| :---: | :---: |
|par_desc|name of the file that contains micro-lines|
|par_type|FILE|
|par_unit|$none$|
|par_required|1|
|par_option|.traj|

|par_name|forceAxis|
| :---: | :---: |
|par_desc|force axis|
|par_type|VEC_6i|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 1 0 0 0|
|par_max|1 1 1 1 1 1|
|par_min|0 0 0 0 0 0|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|25|
|par_min|1|

|par_name|equalRadius|
| :---: | :---: |
|par_desc|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.1|
|par_max|10.0|
|par_min|0.0|

|par_name|maxPathJerk|
| :---: | :---: |
|par_desc|maximum jerk along the path|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|90.0|

|par_name|maxCornerAcc|
| :---: | :---: |
|par_desc|maximum acceleration at corner|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|2.0|
|par_max|6.0|
|par_min|0.5|

|par_name|maxCornerJerk|
| :---: | :---: |
|par_desc|maximum jerk at corner|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|200.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceVel|
| :---: | :---: |
|par_desc|maximum force transition velocity|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceAcc|
| :---: | :---: |
|par_desc|maximum force transition acceleration|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1000.0|
|par_max|100000.0|
|par_min|100.0|

|par_name|frictionViscousCoeff|
| :---: | :---: |
|par_desc|viscous coefficient of friction|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.0|

|par_name|edgeLearntTrajForceCtrlDir|
| :---: | :---: |
|par_desc|Force control direction, only used for edge learnt traj force ctrl frame, -1 or 1|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|

|par_name|edgeLearntTrajFrame|
| :---: | :---: |
|par_desc|Whether to use edge learnt trajectory force ctrl frame or normal tcp force ctrl frame, false for normal tcp frame|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

### [PolishStiff](#polishstiff)


Execute unified motion and force control in polish based on position mode  


#### Primitive Description and Usage

* This primitive is used to conduct polishing as PT\_Polish, and it performs based on position-mode so that it behaves well in stiffness of motion control but lack of accuracy of force control.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|fileName|FILE|name of the file that contains micro-lines|
|forceAxis|VEC_6i|force axis|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|contactAngCtrlEnable|BOOL|whether control contact angle during polish|
|equalRadius|DOUBLE|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|maxPathJerk|DOUBLE|maximum jerk along the path|
|maxCornerAcc|DOUBLE|maximum acceleration at corner|
|maxCornerJerk|DOUBLE|maximum jerk at corner|
|maxForceVel|DOUBLE|maximum force transition velocity|
|maxForceAcc|DOUBLE|maximum force transition acceleration|
|frictionViscousCoeff|DOUBLE|viscous coefficient of friction|
|edgeLearntTrajForceCtrlDir|INT|Force control direction, only used for edge learnt traj force ctrl frame, -1 or 1|
|edgeLearntTrajFrame|BOOL|Whether to use edge learnt trajectory force ctrl frame or normal tcp force ctrl frame, false for normal tcp frame|
  
Below is the detailed description of each parameter:
|par_name|fileName|
| :---: | :---: |
|par_desc|name of the file that contains micro-lines|
|par_type|FILE|
|par_unit|$none$|
|par_required|1|
|par_option|.traj|

|par_name|forceAxis|
| :---: | :---: |
|par_desc|force axis|
|par_type|VEC_6i|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 1 0 0 0|
|par_max|1 1 1 1 1 1|
|par_min|0 0 0 0 0 0|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|25|
|par_min|1|

|par_name|contactAngCtrlEnable|
| :---: | :---: |
|par_desc|whether control contact angle during polish|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

|par_name|equalRadius|
| :---: | :---: |
|par_desc|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.1|
|par_max|10.0|
|par_min|0.0|

|par_name|maxPathJerk|
| :---: | :---: |
|par_desc|maximum jerk along the path|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|90.0|

|par_name|maxCornerAcc|
| :---: | :---: |
|par_desc|maximum acceleration at corner|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|2.0|
|par_max|6.0|
|par_min|0.5|

|par_name|maxCornerJerk|
| :---: | :---: |
|par_desc|maximum jerk at corner|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|200.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceVel|
| :---: | :---: |
|par_desc|maximum force transition velocity|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceAcc|
| :---: | :---: |
|par_desc|maximum force transition acceleration|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1000.0|
|par_max|100000.0|
|par_min|100.0|

|par_name|frictionViscousCoeff|
| :---: | :---: |
|par_desc|viscous coefficient of friction|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.0|

|par_name|edgeLearntTrajForceCtrlDir|
| :---: | :---: |
|par_desc|Force control direction, only used for edge learnt traj force ctrl frame, -1 or 1|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|

|par_name|edgeLearntTrajFrame|
| :---: | :---: |
|par_desc|Whether to use edge learnt trajectory force ctrl frame or normal tcp force ctrl frame, false for normal tcp frame|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

### [PolishStiffer](#polishstiffer)


Execute unified motion and force control in polish based on most stiff position mode  


#### Primitive Description and Usage

* For polishing applications, users can use this primitive to run composed trajectories to cover the surface or edge of the work piece. The trajectory can be line, spline, circle and some pre-designed patterns and will be generated by user teaching. User can specify the contact forces between the robot and work piece in one or multiple directions (moment control is not included). The main benefit of this primitive is the high stiffness of the robot which is required for some edge polish applications like aluminum sheet polish.


#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|fileName|FILE|name of the file that contains micro-lines|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|normalDir|INT|normal direction/force control direction|
|reverseTrajectory|BOOL|reverse trajectory or not|
|tcpFCFrame|BOOL|whether use tcp frame or identified frame, false for identified frame|
|forceAxis|VEC_6i|force axis|
|ffRatio|DOUBLE|Feedforward force ratio for force control|
|trajTranslation|BOOL|Use trajectory translation".|
|equalRadius|DOUBLE|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|maxPathJerk|DOUBLE|maximum jerk along the path|
|maxCornerAcc|DOUBLE|maximum acceleration at corner|
|maxCornerJerk|DOUBLE|maximum jerk at corner|
|maxForceVel|DOUBLE|maximum force transition velocity|
|maxForceAcc|DOUBLE|maximum force transition acceleration|
  
Below is the detailed description of each parameter:
|par_name|fileName|
| :---: | :---: |
|par_desc|name of the file that contains micro-lines|
|par_type|FILE|
|par_unit|$none$|
|par_required|1|
|par_option|.traj|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|25|
|par_min|1|

|par_name|normalDir|
| :---: | :---: |
|par_desc|normal direction/force control direction|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|

|par_name|reverseTrajectory|
| :---: | :---: |
|par_desc|reverse trajectory or not|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

|par_name|tcpFCFrame|
| :---: | :---: |
|par_desc|whether use tcp frame or identified frame, false for identified frame|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

|par_name|forceAxis|
| :---: | :---: |
|par_desc|force axis|
|par_type|VEC_6i|
|par_unit|$none$|
|par_required|0|
|par_default|0 1 0 0 0 0|
|par_max|1 1 1 1 1 1|
|par_min|0 0 0 0 0 0|

|par_name|ffRatio|
| :---: | :---: |
|par_desc|Feedforward force ratio for force control|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1.0|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|trajTranslation|
| :---: | :---: |
|par_desc|Use trajectory translation".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|equalRadius|
| :---: | :---: |
|par_desc|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.1|
|par_max|10.0|
|par_min|0.0|

|par_name|maxPathJerk|
| :---: | :---: |
|par_desc|maximum jerk along the path|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|90.0|

|par_name|maxCornerAcc|
| :---: | :---: |
|par_desc|maximum acceleration at corner|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|2.0|
|par_max|6.0|
|par_min|0.5|

|par_name|maxCornerJerk|
| :---: | :---: |
|par_desc|maximum jerk at corner|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|200.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceVel|
| :---: | :---: |
|par_desc|maximum force transition velocity|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceAcc|
| :---: | :---: |
|par_desc|maximum force transition acceleration|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1000.0|
|par_max|100000.0|
|par_min|100.0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

### [PolishILC](#polishilc)


Execute primitive [Polish](#polish) added with interactive learning control  



#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|fileName|FILE|name of the file that contains micro-lines|
|forceAxis|VEC_6i|force axis|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|enableILC|BOOL|enable ILC or not".|
|enableILCTraining|BOOL|enable ILC training or not".|
|restartILCTraining|BOOL|restart ILC training or not".|
|learningRate|DOUBLE|Iterative initial learning rate|
|decayRate|DOUBLE|Iterative learning rate decay rate|
|learningRateType|INT|Iterative learning rate scheduler type|
|ILCForwardSteps|INT|Forward step that ILC would take to predict the disturbance. This is mainly to compensate force error when robot reverse its direction|
|ILCFile|STRING|file to read or store ILC result|
|equalRadius|DOUBLE|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|maxPathJerk|DOUBLE|maximum jerk along the path|
|maxCornerAcc|DOUBLE|maximum acceleration at corner|
|maxCornerJerk|DOUBLE|maximum jerk at corner|
|maxForceVel|DOUBLE|maximum force transition velocity|
|maxForceAcc|DOUBLE|maximum force transition acceleration|
|frictionViscousCoeff|DOUBLE|viscous coefficient of friction|
|edgeLearntTrajForceCtrlDir|INT|Force control direction, only used for edge learnt traj force ctrl frame, -1 or 1|
|edgeLearntTrajFrame|BOOL|Whether to use edge learnt trajectory force ctrl frame or normal tcp force ctrl frame, false for normal tcp frame|
  
Below is the detailed description of each parameter:
|par_name|fileName|
| :---: | :---: |
|par_desc|name of the file that contains micro-lines|
|par_type|FILE|
|par_unit|$none$|
|par_required|1|
|par_option|.traj|

|par_name|forceAxis|
| :---: | :---: |
|par_desc|force axis|
|par_type|VEC_6i|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 1 0 0 0|
|par_max|1 1 1 1 1 1|
|par_min|0 0 0 0 0 0|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|25|
|par_min|1|

|par_name|enableILC|
| :---: | :---: |
|par_desc|enable ILC or not".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|enableILCTraining|
| :---: | :---: |
|par_desc|enable ILC training or not".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|restartILCTraining|
| :---: | :---: |
|par_desc|restart ILC training or not".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|learningRate|
| :---: | :---: |
|par_desc|Iterative initial learning rate|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.3|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|decayRate|
| :---: | :---: |
|par_desc|Iterative learning rate decay rate|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.015|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|learningRateType|
| :---: | :---: |
|par_desc|Iterative learning rate scheduler type|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|
|par_max|2|
|par_min|0|
|par_input_type|KEYIN|

|par_name|ILCForwardSteps|
| :---: | :---: |
|par_desc|Forward step that ILC would take to predict the disturbance. This is mainly to compensate force error when robot reverse its direction|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_max|200|
|par_min|0|
|par_input_type|KEYIN|

|par_name|ILCFile|
| :---: | :---: |
|par_desc|file to read or store ILC result|
|par_type|STRING|
|par_unit|$none$|
|par_required|1|
|par_input_type|KEYIN|

|par_name|equalRadius|
| :---: | :---: |
|par_desc|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.1|
|par_max|10.0|
|par_min|0.0|

|par_name|maxPathJerk|
| :---: | :---: |
|par_desc|maximum jerk along the path|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|90.0|

|par_name|maxCornerAcc|
| :---: | :---: |
|par_desc|maximum acceleration at corner|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|2.0|
|par_max|6.0|
|par_min|0.5|

|par_name|maxCornerJerk|
| :---: | :---: |
|par_desc|maximum jerk at corner|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|200.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceVel|
| :---: | :---: |
|par_desc|maximum force transition velocity|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceAcc|
| :---: | :---: |
|par_desc|maximum force transition acceleration|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1000.0|
|par_max|100000.0|
|par_min|100.0|

|par_name|frictionViscousCoeff|
| :---: | :---: |
|par_desc|viscous coefficient of friction|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.0|

|par_name|edgeLearntTrajForceCtrlDir|
| :---: | :---: |
|par_desc|Force control direction, only used for edge learnt traj force ctrl frame, -1 or 1|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|

|par_name|edgeLearntTrajFrame|
| :---: | :---: |
|par_desc|Whether to use edge learnt trajectory force ctrl frame or normal tcp force ctrl frame, false for normal tcp frame|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

### [PolishStiffILC](#polishstiffilc)


Execute primitive [PolishStiff](#polishstiff) added with interactive learning control  



#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|fileName|FILE|name of the file that contains micro-lines|
|forceAxis|VEC_6i|force axis|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|contactAngCtrlEnable|BOOL|whether control contact angle during polish|
|enableILC|BOOL|enable ILC or not".|
|enableILCTraining|BOOL|enable ILC training or not".|
|restartILCTraining|BOOL|restart ILC training or not".|
|learningRate|DOUBLE|Iterative initial learning rate|
|decayRate|DOUBLE|Iterative learning rate decay rate|
|learningRateType|INT|Iterative learning rate scheduler type|
|ILCForwardSteps|INT|Forward step that ILC would take to predict the disturbance. This is mainly to compensate force error when robot reverse its direction|
|ILCFile|STRING|file to read or store ILC result|
|equalRadius|DOUBLE|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|maxPathJerk|DOUBLE|maximum jerk along the path|
|maxCornerAcc|DOUBLE|maximum acceleration at corner|
|maxCornerJerk|DOUBLE|maximum jerk at corner|
|maxForceVel|DOUBLE|maximum force transition velocity|
|maxForceAcc|DOUBLE|maximum force transition acceleration|
|frictionViscousCoeff|DOUBLE|viscous coefficient of friction|
|edgeLearntTrajForceCtrlDir|INT|Force control direction, only used for edge learnt traj force ctrl frame, -1 or 1|
|edgeLearntTrajFrame|BOOL|Whether to use edge learnt trajectory force ctrl frame or normal tcp force ctrl frame, false for normal tcp frame|
  
Below is the detailed description of each parameter:
|par_name|fileName|
| :---: | :---: |
|par_desc|name of the file that contains micro-lines|
|par_type|FILE|
|par_unit|$none$|
|par_required|1|
|par_option|.traj|

|par_name|forceAxis|
| :---: | :---: |
|par_desc|force axis|
|par_type|VEC_6i|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 1 0 0 0|
|par_max|1 1 1 1 1 1|
|par_min|0 0 0 0 0 0|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|25|
|par_min|1|

|par_name|contactAngCtrlEnable|
| :---: | :---: |
|par_desc|whether control contact angle during polish|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

|par_name|enableILC|
| :---: | :---: |
|par_desc|enable ILC or not".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|enableILCTraining|
| :---: | :---: |
|par_desc|enable ILC training or not".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|restartILCTraining|
| :---: | :---: |
|par_desc|restart ILC training or not".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|learningRate|
| :---: | :---: |
|par_desc|Iterative initial learning rate|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.3|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|decayRate|
| :---: | :---: |
|par_desc|Iterative learning rate decay rate|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.015|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|learningRateType|
| :---: | :---: |
|par_desc|Iterative learning rate scheduler type|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|
|par_max|2|
|par_min|0|
|par_input_type|KEYIN|

|par_name|ILCForwardSteps|
| :---: | :---: |
|par_desc|Forward step that ILC would take to predict the disturbance. This is mainly to compensate force error when robot reverse its direction|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_max|200|
|par_min|0|
|par_input_type|KEYIN|

|par_name|ILCFile|
| :---: | :---: |
|par_desc|file to read or store ILC result|
|par_type|STRING|
|par_unit|$none$|
|par_required|1|
|par_input_type|KEYIN|

|par_name|equalRadius|
| :---: | :---: |
|par_desc|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.1|
|par_max|10.0|
|par_min|0.0|

|par_name|maxPathJerk|
| :---: | :---: |
|par_desc|maximum jerk along the path|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|90.0|

|par_name|maxCornerAcc|
| :---: | :---: |
|par_desc|maximum acceleration at corner|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|2.0|
|par_max|6.0|
|par_min|0.5|

|par_name|maxCornerJerk|
| :---: | :---: |
|par_desc|maximum jerk at corner|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|200.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceVel|
| :---: | :---: |
|par_desc|maximum force transition velocity|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceAcc|
| :---: | :---: |
|par_desc|maximum force transition acceleration|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1000.0|
|par_max|100000.0|
|par_min|100.0|

|par_name|frictionViscousCoeff|
| :---: | :---: |
|par_desc|viscous coefficient of friction|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.0|

|par_name|edgeLearntTrajForceCtrlDir|
| :---: | :---: |
|par_desc|Force control direction, only used for edge learnt traj force ctrl frame, -1 or 1|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|

|par_name|edgeLearntTrajFrame|
| :---: | :---: |
|par_desc|Whether to use edge learnt trajectory force ctrl frame or normal tcp force ctrl frame, false for normal tcp frame|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

### [PolishStifferILC](#polishstifferilc)


Execute primitive [PolishStiffer](#polishstiffer) added with interactive learning control  



#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|fileName|FILE|name of the file that contains micro-lines|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|normalDir|INT|normal direction/force control direction|
|reverseTrajectory|BOOL|reverse trajectory or not|
|tcpFCFrame|BOOL|whether use tcp frame or identified frame, false for identified frame|
|forceAxis|VEC_6i|force axis|
|ffRatio|DOUBLE|Feedforward force ratio for force control|
|trajTranslation|BOOL|Use trajectory translation".|
|enableILC|BOOL|enable ILC or not".|
|enableILCTraining|BOOL|enable ILC training or not".|
|restartILCTraining|BOOL|restart ILC training or not".|
|learningRatePos|DOUBLE|Iterative initial learning rate pos|
|learningRateVel|DOUBLE|Iterative initial learning rate vel|
|learningRateAcc|DOUBLE|Iterative initial learning rate acc|
|decayRatePos|DOUBLE|Iterative learning rate decay rate pos|
|decayRateVel|DOUBLE|Iterative learning rate decay rate vel|
|decayRateAcc|DOUBLE|Iterative learning rate decay rate acc|
|learningRateType|INT|Iterative learning rate scheduler type|
|ILCForwardSteps|INT|Forward step that ILC would take to predict the disturbance. This is mainly to compensate force error when robot reverse its direction|
|ILCFile|STRING|file to read or store ILC result|
|equalRadius|DOUBLE|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|maxPathJerk|DOUBLE|maximum jerk along the path|
|maxCornerAcc|DOUBLE|maximum acceleration at corner|
|maxCornerJerk|DOUBLE|maximum jerk at corner|
|maxForceVel|DOUBLE|maximum force transition velocity|
|maxForceAcc|DOUBLE|maximum force transition acceleration|
  
Below is the detailed description of each parameter:
|par_name|fileName|
| :---: | :---: |
|par_desc|name of the file that contains micro-lines|
|par_type|FILE|
|par_unit|$none$|
|par_required|1|
|par_option|.traj|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|25|
|par_min|1|

|par_name|normalDir|
| :---: | :---: |
|par_desc|normal direction/force control direction|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|

|par_name|reverseTrajectory|
| :---: | :---: |
|par_desc|reverse trajectory or not|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

|par_name|tcpFCFrame|
| :---: | :---: |
|par_desc|whether use tcp frame or identified frame, false for identified frame|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

|par_name|forceAxis|
| :---: | :---: |
|par_desc|force axis|
|par_type|VEC_6i|
|par_unit|$none$|
|par_required|0|
|par_default|0 1 0 0 0 0|
|par_max|1 1 1 1 1 1|
|par_min|0 0 0 0 0 0|

|par_name|ffRatio|
| :---: | :---: |
|par_desc|Feedforward force ratio for force control|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1.0|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|trajTranslation|
| :---: | :---: |
|par_desc|Use trajectory translation".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|enableILC|
| :---: | :---: |
|par_desc|enable ILC or not".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|enableILCTraining|
| :---: | :---: |
|par_desc|enable ILC training or not".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|restartILCTraining|
| :---: | :---: |
|par_desc|restart ILC training or not".|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_input_type|KEYIN|

|par_name|learningRatePos|
| :---: | :---: |
|par_desc|Iterative initial learning rate pos|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.3|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|learningRateVel|
| :---: | :---: |
|par_desc|Iterative initial learning rate vel|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.3|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|learningRateAcc|
| :---: | :---: |
|par_desc|Iterative initial learning rate acc|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.3|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|decayRatePos|
| :---: | :---: |
|par_desc|Iterative learning rate decay rate pos|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.015|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|decayRateVel|
| :---: | :---: |
|par_desc|Iterative learning rate decay rate vel|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.015|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|decayRateAcc|
| :---: | :---: |
|par_desc|Iterative learning rate decay rate acc|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.015|
|par_max|1.0|
|par_min|0|
|par_input_type|KEYIN|

|par_name|learningRateType|
| :---: | :---: |
|par_desc|Iterative learning rate scheduler type|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|1|
|par_max|2|
|par_min|0|
|par_input_type|KEYIN|

|par_name|ILCForwardSteps|
| :---: | :---: |
|par_desc|Forward step that ILC would take to predict the disturbance. This is mainly to compensate force error when robot reverse its direction|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|0|
|par_max|200|
|par_min|0|
|par_input_type|KEYIN|

|par_name|ILCFile|
| :---: | :---: |
|par_desc|file to read or store ILC result|
|par_type|STRING|
|par_unit|$none$|
|par_required|1|
|par_input_type|KEYIN|

|par_name|equalRadius|
| :---: | :---: |
|par_desc|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.1|
|par_max|10.0|
|par_min|0.0|

|par_name|maxPathJerk|
| :---: | :---: |
|par_desc|maximum jerk along the path|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|90.0|

|par_name|maxCornerAcc|
| :---: | :---: |
|par_desc|maximum acceleration at corner|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|2.0|
|par_max|6.0|
|par_min|0.5|

|par_name|maxCornerJerk|
| :---: | :---: |
|par_desc|maximum jerk at corner|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|200.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceVel|
| :---: | :---: |
|par_desc|maximum force transition velocity|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceAcc|
| :---: | :---: |
|par_desc|maximum force transition acceleration|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1000.0|
|par_max|100000.0|
|par_min|100.0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|

### [EdgeLearning](#edgelearning)


Execute trajectory learning based on edge of object  



#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|normalDir|INT|Force control direction, 1 or -1|
|initMotionCtrlDir|VEC_3d|init motion direction in tcp coordinate. It should perpendicular to init force control direction.|
|maxPosError|DOUBLE|max position error between the measurement pose and the target pose|
|targetForce|DOUBLE|target force to control on the control force axis|
|maxTcpForce|DOUBLE|total max tcp force|
|motionVel|DOUBLE|motion velocity for the polish|
|maxEdgeTraversalDistance|DOUBLE|polish distance before robot terminates this primitive|
|maxEdgeTraversalTime|DOUBLE|polish duration before robot terminates this primitive|
|velAdjustRatio|DOUBLE|motion velocity based polish angle adjustment ratio, between 0 and 1|
|estimatedFriction|DOUBLE|estimated friction force, force based polish angle adjustment utilizes this force|
|targetTolLevel|INT|target tol level|
|maxAngAdjustVel|DOUBLE|max angular velocity for robot to adjust it control direction|
|maxFreeMotionDuration|DOUBLE|terminate if duration of NO CONTACT exceed this value|
|waypointDist|DOUBLE|waypoint distance to record a waypoint for the trajectory|
|recordedTrajVel|DOUBLE|recorded path waypoints commanded velocity|
|recordTrajFlag|BOOL|waypoint distance to record a waypoint for the trajectory|
|pathFileName|STRING|save to file name for the recorded trajectory path|
  
Below is the detailed description of each parameter:
|par_name|normalDir|
| :---: | :---: |
|par_desc|Force control direction, 1 or -1|
|par_type|INT|
|par_unit|$none$|
|par_required|1|
|par_default|1|

|par_name|initMotionCtrlDir|
| :---: | :---: |
|par_desc|init motion direction in tcp coordinate. It should perpendicular to init force control direction.|
|par_type|VEC_3d|
|par_unit|$none$|
|par_required|1|

|par_name|maxPosError|
| :---: | :---: |
|par_desc|max position error between the measurement pose and the target pose|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.1|

|par_name|targetForce|
| :---: | :---: |
|par_desc|target force to control on the control force axis|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|0|
|par_default|-10|

|par_name|maxTcpForce|
| :---: | :---: |
|par_desc|total max tcp force|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|0|
|par_default|50|

|par_name|motionVel|
| :---: | :---: |
|par_desc|motion velocity for the polish|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|0.05|

|par_name|maxEdgeTraversalDistance|
| :---: | :---: |
|par_desc|polish distance before robot terminates this primitive|
|par_type|DOUBLE|
|par_unit|$m$|
|par_required|0|
|par_default|0.2|

|par_name|maxEdgeTraversalTime|
| :---: | :---: |
|par_desc|polish duration before robot terminates this primitive|
|par_type|DOUBLE|
|par_unit|$s$|
|par_required|0|
|par_default|7|

|par_name|velAdjustRatio|
| :---: | :---: |
|par_desc|motion velocity based polish angle adjustment ratio, between 0 and 1|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1.0|

|par_name|estimatedFriction|
| :---: | :---: |
|par_desc|estimated friction force, force based polish angle adjustment utilizes this force|
|par_type|DOUBLE|
|par_unit|$N$|
|par_required|0|
|par_default|2|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|target tol level|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|2|

|par_name|maxAngAdjustVel|
| :---: | :---: |
|par_desc|max angular velocity for robot to adjust it control direction|
|par_type|DOUBLE|
|par_unit|$deg/s$|
|par_required|0|
|par_default|100.0|

|par_name|maxFreeMotionDuration|
| :---: | :---: |
|par_desc|terminate if duration of NO CONTACT exceed this value|
|par_type|DOUBLE|
|par_unit|$s$|
|par_required|0|
|par_default|2.0|

|par_name|waypointDist|
| :---: | :---: |
|par_desc|waypoint distance to record a waypoint for the trajectory|
|par_type|DOUBLE|
|par_unit|$mm$|
|par_required|0|
|par_default|7.0|

|par_name|recordedTrajVel|
| :---: | :---: |
|par_desc|recorded path waypoints commanded velocity|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|0.05|

|par_name|recordTrajFlag|
| :---: | :---: |
|par_desc|waypoint distance to record a waypoint for the trajectory|
|par_type|BOOL|
|par_unit|$none$|
|par_required|0|
|par_default|0|

|par_name|pathFileName|
| :---: | :---: |
|par_desc|save to file name for the recorded trajectory path|
|par_type|STRING|
|par_unit|$none$|
|par_required|0|
|par_default|EdgeLearntTraj|

### [SurfaceLearning](#surfacelearning)


Execute trajectory learning based on surface of object  



#### Primitive Input Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|fileName|FILE|name of the file that contains micro-lines|
|forceAxis|VEC_6i|force axis|
|preferJntPos|VEC_7d|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|targetTolLevel|INT|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|waypointDist|DOUBLE|trajectory acquire step|
|pathFileName|STRING|name of the file that output for trajectory|
|maxLearntVel|DOUBLE|maximum learning velocity|
|recordedTrajVel|DOUBLE|recorded path waypoints commanded velocity|
|equalRadius|DOUBLE|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|maxPathJerk|DOUBLE|maximum jerk along the path|
|maxCornerAcc|DOUBLE|maximum acceleration at corner|
|maxCornerJerk|DOUBLE|maximum jerk at corner|
|maxForceVel|DOUBLE|maximum force transition velocity|
|maxForceAcc|DOUBLE|maximum force transition acceleration|
|frictionViscousCoeff|DOUBLE|viscous coefficient of friction|
  
Below is the detailed description of each parameter:
|par_name|fileName|
| :---: | :---: |
|par_desc|name of the file that contains micro-lines|
|par_type|FILE|
|par_required|1|
|par_unit|$none$|
|par_option|.traj|

|par_name|forceAxis|
| :---: | :---: |
|par_desc|force axis|
|par_type|VEC_6i|
|par_unit|$none$|
|par_required|0|
|par_default|0 0 1 1 1 0|
|par_max|1 1 1 1 1 1|
|par_min|0 0 0 0 0 0|

|par_name|preferJntPos|
| :---: | :---: |
|par_desc|preferred target joint configuration. The robot is compliance with Cartesian constraint while reaching this configuration as close as possible.|
|par_type|VEC_7d|
|par_unit|$deg$|
|par_required|0|
|par_default|0.0 -40.0 0.0 90.0 0.0 40.0 0.0|
|par_max|160 130 170 154 170 260 170|
|par_min|-160 -130 -170 -107 -170 -80 -170|
|par_freedrive|1|

|par_name|targetTolLevel|
| :---: | :---: |
|par_desc|tolerance level of target pose accuracy ranged from 1 to 10, where 1 is the smallest tolerence|
|par_type|INT|
|par_unit|$none$|
|par_required|0|
|par_default|3|
|par_max|25|
|par_min|1|

|par_name|waypointDist|
| :---: | :---: |
|par_desc|trajectory acquire step|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|6.0|
|par_min|6.0|

|par_name|pathFileName|
| :---: | :---: |
|par_desc|name of the file that output for trajectory|
|par_type|STRING|
|par_unit|$none$|
|par_required|1|
|par_default|SurfaceLearntraj|

|par_name|maxLearntVel|
| :---: | :---: |
|par_desc|maximum learning velocity|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|0.05|
|par_max|0.2|
|par_min|0|

|par_name|recordedTrajVel|
| :---: | :---: |
|par_desc|recorded path waypoints commanded velocity|
|par_type|DOUBLE|
|par_unit|$m/s$|
|par_required|0|
|par_default|0.05|

|par_name|equalRadius|
| :---: | :---: |
|par_desc|Convert orientation to linear distance. It standards for the ability that the orientation follows the orientation|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.1|
|par_max|10.0|
|par_min|0.0|

|par_name|maxPathJerk|
| :---: | :---: |
|par_desc|maximum jerk along the path|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|90.0|

|par_name|maxCornerAcc|
| :---: | :---: |
|par_desc|maximum acceleration at corner|
|par_type|DOUBLE|
|par_unit|$m/s^2$|
|par_required|0|
|par_default|2.0|
|par_max|6.0|
|par_min|0.5|

|par_name|maxCornerJerk|
| :---: | :---: |
|par_desc|maximum jerk at corner|
|par_type|DOUBLE|
|par_unit|$m/s^3$|
|par_required|0|
|par_default|200.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceVel|
| :---: | :---: |
|par_desc|maximum force transition velocity|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|100.0|
|par_max|10000.0|
|par_min|10.0|

|par_name|maxForceAcc|
| :---: | :---: |
|par_desc|maximum force transition acceleration|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|1000.0|
|par_max|100000.0|
|par_min|100.0|

|par_name|frictionViscousCoeff|
| :---: | :---: |
|par_desc|viscous coefficient of friction|
|par_type|DOUBLE|
|par_unit|$none$|
|par_required|0|
|par_default|0.0|

#### Primitive State Parameters

|State Parameter Name(par_name)|Type|Description|
| :---: | :---: | :---: |
|reachedTarget|BOOL|flag to indicate if the robot has reached target|
|waypointIndex|INT|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
  
Below is the detailed description of each parameter:
|par_name|reachedTarget|
| :---: | :---: |
|par_desc|flag to indicate if the robot has reached target|
|par_type|BOOL|
|par_unit|$none$|

|par_name|waypointIndex|
| :---: | :---: |
|par_desc|Index of the current waypoint the robot just passed. The waypoint index is 0 indexed where the 0th index is the initial pose|
|par_type|INT|
|par_unit|$none$|
|par_min|0|
